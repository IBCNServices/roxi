<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="147"><g><title>libsystem_kernel.dylib`__exit (4 samples, 2.72%)</title><rect x="0.0000%" y="277" width="2.7211%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="287.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 6.80%)</title><rect x="6.8027%" y="197" width="6.8027%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="10"/><text x="7.0527%" y="207.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 5.44%)</title><rect x="8.1633%" y="181" width="5.4422%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="8"/><text x="8.4133%" y="191.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 5.44%)</title><rect x="8.1633%" y="165" width="5.4422%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="8"/><text x="8.4133%" y="175.50">libsyst..</text></g><g><title>libsystem_kernel.dylib`mach_vm_map (1 samples, 0.68%)</title><rect x="12.9252%" y="149" width="0.6803%" height="15" fill="rgb(208,68,35)" fg:x="19" fg:w="1"/><text x="13.1752%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1 samples, 0.68%)</title><rect x="13.6054%" y="165" width="0.6803%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="1"/><text x="13.8554%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.68%)</title><rect x="13.6054%" y="149" width="0.6803%" height="15" fill="rgb(207,160,47)" fg:x="20" fg:w="1"/><text x="13.8554%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 2.04%)</title><rect x="14.2857%" y="165" width="2.0408%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="3"/><text x="14.5357%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.68%)</title><rect x="16.3265%" y="165" width="0.6803%" height="15" fill="rgb(218,30,26)" fg:x="24" fg:w="1"/><text x="16.5765%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 4.08%)</title><rect x="13.6054%" y="197" width="4.0816%" height="15" fill="rgb(220,122,19)" fg:x="20" fg:w="6"/><text x="13.8554%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 4.08%)</title><rect x="13.6054%" y="181" width="4.0816%" height="15" fill="rgb(250,228,42)" fg:x="20" fg:w="6"/><text x="13.8554%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.68%)</title><rect x="17.0068%" y="165" width="0.6803%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="1"/><text x="17.2568%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.68%)</title><rect x="17.0068%" y="149" width="0.6803%" height="15" fill="rgb(216,20,37)" fg:x="25" fg:w="1"/><text x="17.2568%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.68%)</title><rect x="17.6871%" y="197" width="0.6803%" height="15" fill="rgb(206,188,39)" fg:x="26" fg:w="1"/><text x="17.9371%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.68%)</title><rect x="19.0476%" y="181" width="0.6803%" height="15" fill="rgb(217,207,13)" fg:x="28" fg:w="1"/><text x="19.2976%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.68%)</title><rect x="19.0476%" y="165" width="0.6803%" height="15" fill="rgb(231,73,38)" fg:x="28" fg:w="1"/><text x="19.2976%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.68%)</title><rect x="19.0476%" y="149" width="0.6803%" height="15" fill="rgb(225,20,46)" fg:x="28" fg:w="1"/><text x="19.2976%" y="159.50"></text></g><g><title>server`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 2.72%)</title><rect x="18.3673%" y="197" width="2.7211%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="4"/><text x="18.6173%" y="207.50">se..</text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 1.36%)</title><rect x="19.7279%" y="181" width="1.3605%" height="15" fill="rgb(221,200,47)" fg:x="29" fg:w="2"/><text x="19.9779%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 1.36%)</title><rect x="19.7279%" y="165" width="1.3605%" height="15" fill="rgb(226,26,5)" fg:x="29" fg:w="2"/><text x="19.9779%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 1.36%)</title><rect x="19.7279%" y="149" width="1.3605%" height="15" fill="rgb(249,33,26)" fg:x="29" fg:w="2"/><text x="19.9779%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 2.04%)</title><rect x="21.7687%" y="181" width="2.0408%" height="15" fill="rgb(235,183,28)" fg:x="32" fg:w="3"/><text x="22.0187%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 2.04%)</title><rect x="21.7687%" y="165" width="2.0408%" height="15" fill="rgb(221,5,38)" fg:x="32" fg:w="3"/><text x="22.0187%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 2.04%)</title><rect x="21.7687%" y="149" width="2.0408%" height="15" fill="rgb(247,18,42)" fg:x="32" fg:w="3"/><text x="22.0187%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.68%)</title><rect x="24.4898%" y="85" width="0.6803%" height="15" fill="rgb(241,131,45)" fg:x="36" fg:w="1"/><text x="24.7398%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.68%)</title><rect x="24.4898%" y="69" width="0.6803%" height="15" fill="rgb(249,31,29)" fg:x="36" fg:w="1"/><text x="24.7398%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.68%)</title><rect x="24.4898%" y="53" width="0.6803%" height="15" fill="rgb(225,111,53)" fg:x="36" fg:w="1"/><text x="24.7398%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.68%)</title><rect x="24.4898%" y="37" width="0.6803%" height="15" fill="rgb(238,160,17)" fg:x="36" fg:w="1"/><text x="24.7398%" y="47.50"></text></g><g><title>server`alloc::fmt::format (7 samples, 4.76%)</title><rect x="21.0884%" y="197" width="4.7619%" height="15" fill="rgb(214,148,48)" fg:x="31" fg:w="7"/><text x="21.3384%" y="207.50">server..</text></g><g><title>server`core::fmt::write (3 samples, 2.04%)</title><rect x="23.8095%" y="181" width="2.0408%" height="15" fill="rgb(232,36,49)" fg:x="35" fg:w="3"/><text x="24.0595%" y="191.50">s..</text></g><g><title>server`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (2 samples, 1.36%)</title><rect x="24.4898%" y="165" width="1.3605%" height="15" fill="rgb(209,103,24)" fg:x="36" fg:w="2"/><text x="24.7398%" y="175.50"></text></g><g><title>server`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 1.36%)</title><rect x="24.4898%" y="149" width="1.3605%" height="15" fill="rgb(229,88,8)" fg:x="36" fg:w="2"/><text x="24.7398%" y="159.50"></text></g><g><title>server`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 1.36%)</title><rect x="24.4898%" y="133" width="1.3605%" height="15" fill="rgb(213,181,19)" fg:x="36" fg:w="2"/><text x="24.7398%" y="143.50"></text></g><g><title>server`alloc::raw_vec::finish_grow (2 samples, 1.36%)</title><rect x="24.4898%" y="117" width="1.3605%" height="15" fill="rgb(254,191,54)" fg:x="36" fg:w="2"/><text x="24.7398%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 1.36%)</title><rect x="24.4898%" y="101" width="1.3605%" height="15" fill="rgb(241,83,37)" fg:x="36" fg:w="2"/><text x="24.7398%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.68%)</title><rect x="25.1701%" y="85" width="0.6803%" height="15" fill="rgb(233,36,39)" fg:x="37" fg:w="1"/><text x="25.4201%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.68%)</title><rect x="25.1701%" y="69" width="0.6803%" height="15" fill="rgb(226,3,54)" fg:x="37" fg:w="1"/><text x="25.4201%" y="79.50"></text></g><g><title>server`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.68%)</title><rect x="25.8503%" y="197" width="0.6803%" height="15" fill="rgb(245,192,40)" fg:x="38" fg:w="1"/><text x="26.1003%" y="207.50"></text></g><g><title>server`alloc::raw_vec::finish_grow (1 samples, 0.68%)</title><rect x="25.8503%" y="181" width="0.6803%" height="15" fill="rgb(238,167,29)" fg:x="38" fg:w="1"/><text x="26.1003%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.68%)</title><rect x="25.8503%" y="165" width="0.6803%" height="15" fill="rgb(232,182,51)" fg:x="38" fg:w="1"/><text x="26.1003%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.68%)</title><rect x="25.8503%" y="149" width="0.6803%" height="15" fill="rgb(231,60,39)" fg:x="38" fg:w="1"/><text x="26.1003%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.68%)</title><rect x="25.8503%" y="133" width="0.6803%" height="15" fill="rgb(208,69,12)" fg:x="38" fg:w="1"/><text x="26.1003%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.68%)</title><rect x="25.8503%" y="117" width="0.6803%" height="15" fill="rgb(235,93,37)" fg:x="38" fg:w="1"/><text x="26.1003%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.68%)</title><rect x="26.5306%" y="181" width="0.6803%" height="15" fill="rgb(213,116,39)" fg:x="39" fg:w="1"/><text x="26.7806%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.68%)</title><rect x="26.5306%" y="165" width="0.6803%" height="15" fill="rgb(222,207,29)" fg:x="39" fg:w="1"/><text x="26.7806%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.68%)</title><rect x="26.5306%" y="149" width="0.6803%" height="15" fill="rgb(206,96,30)" fg:x="39" fg:w="1"/><text x="26.7806%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.68%)</title><rect x="29.9320%" y="165" width="0.6803%" height="15" fill="rgb(218,138,4)" fg:x="44" fg:w="1"/><text x="30.1820%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.68%)</title><rect x="29.9320%" y="149" width="0.6803%" height="15" fill="rgb(250,191,14)" fg:x="44" fg:w="1"/><text x="30.1820%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.68%)</title><rect x="29.9320%" y="133" width="0.6803%" height="15" fill="rgb(239,60,40)" fg:x="44" fg:w="1"/><text x="30.1820%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 1.36%)</title><rect x="36.0544%" y="133" width="1.3605%" height="15" fill="rgb(206,27,48)" fg:x="53" fg:w="2"/><text x="36.3044%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 2.04%)</title><rect x="37.4150%" y="133" width="2.0408%" height="15" fill="rgb(225,35,8)" fg:x="55" fg:w="3"/><text x="37.6650%" y="143.50">l..</text></g><g><title>server`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 13.61%)</title><rect x="27.2109%" y="181" width="13.6054%" height="15" fill="rgb(250,213,24)" fg:x="40" fg:w="20"/><text x="27.4609%" y="191.50">server`&lt;hashbrown::ra..</text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 10.20%)</title><rect x="30.6122%" y="165" width="10.2041%" height="15" fill="rgb(247,123,22)" fg:x="45" fg:w="15"/><text x="30.8622%" y="175.50">libsystem_mallo..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 9.52%)</title><rect x="31.2925%" y="149" width="9.5238%" height="15" fill="rgb(231,138,38)" fg:x="46" fg:w="14"/><text x="31.5425%" y="159.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (2 samples, 1.36%)</title><rect x="39.4558%" y="133" width="1.3605%" height="15" fill="rgb(231,145,46)" fg:x="58" fg:w="2"/><text x="39.7058%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 1.36%)</title><rect x="39.4558%" y="117" width="1.3605%" height="15" fill="rgb(251,118,11)" fg:x="58" fg:w="2"/><text x="39.7058%" y="127.50"></text></g><g><title>server`core::ptr::drop_in_place&lt;minimal::TripleStore&gt; (22 samples, 14.97%)</title><rect x="26.5306%" y="197" width="14.9660%" height="15" fill="rgb(217,147,25)" fg:x="39" fg:w="22"/><text x="26.7806%" y="207.50">server`core::ptr::drop_..</text></g><g><title>server`core::ptr::drop_in_place&lt;minimal::ruleindex::RuleIndex&gt; (1 samples, 0.68%)</title><rect x="40.8163%" y="181" width="0.6803%" height="15" fill="rgb(247,81,37)" fg:x="60" fg:w="1"/><text x="41.0663%" y="191.50"></text></g><g><title>server`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.68%)</title><rect x="40.8163%" y="165" width="0.6803%" height="15" fill="rgb(209,12,38)" fg:x="60" fg:w="1"/><text x="41.0663%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.68%)</title><rect x="40.8163%" y="149" width="0.6803%" height="15" fill="rgb(227,1,9)" fg:x="60" fg:w="1"/><text x="41.0663%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 1.36%)</title><rect x="45.5782%" y="181" width="1.3605%" height="15" fill="rgb(248,47,43)" fg:x="67" fg:w="2"/><text x="45.8282%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 1.36%)</title><rect x="45.5782%" y="165" width="1.3605%" height="15" fill="rgb(221,10,30)" fg:x="67" fg:w="2"/><text x="45.8282%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 1.36%)</title><rect x="45.5782%" y="149" width="1.3605%" height="15" fill="rgb(210,229,1)" fg:x="67" fg:w="2"/><text x="45.8282%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 2.04%)</title><rect x="46.9388%" y="181" width="2.0408%" height="15" fill="rgb(222,148,37)" fg:x="69" fg:w="3"/><text x="47.1888%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 1.36%)</title><rect x="47.6190%" y="165" width="1.3605%" height="15" fill="rgb(234,67,33)" fg:x="70" fg:w="2"/><text x="47.8690%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 1.36%)</title><rect x="47.6190%" y="149" width="1.3605%" height="15" fill="rgb(247,98,35)" fg:x="70" fg:w="2"/><text x="47.8690%" y="159.50"></text></g><g><title>server`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 2.72%)</title><rect x="48.9796%" y="181" width="2.7211%" height="15" fill="rgb(247,138,52)" fg:x="72" fg:w="4"/><text x="49.2296%" y="191.50">se..</text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 2.72%)</title><rect x="48.9796%" y="165" width="2.7211%" height="15" fill="rgb(213,79,30)" fg:x="72" fg:w="4"/><text x="49.2296%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 2.04%)</title><rect x="49.6599%" y="149" width="2.0408%" height="15" fill="rgb(246,177,23)" fg:x="73" fg:w="3"/><text x="49.9099%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 1.36%)</title><rect x="50.3401%" y="133" width="1.3605%" height="15" fill="rgb(230,62,27)" fg:x="74" fg:w="2"/><text x="50.5901%" y="143.50"></text></g><g><title>server`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.36%)</title><rect x="51.7007%" y="181" width="1.3605%" height="15" fill="rgb(216,154,8)" fg:x="76" fg:w="2"/><text x="51.9507%" y="191.50"></text></g><g><title>server`alloc::raw_vec::finish_grow (2 samples, 1.36%)</title><rect x="51.7007%" y="165" width="1.3605%" height="15" fill="rgb(244,35,45)" fg:x="76" fg:w="2"/><text x="51.9507%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 1.36%)</title><rect x="51.7007%" y="149" width="1.3605%" height="15" fill="rgb(251,115,12)" fg:x="76" fg:w="2"/><text x="51.9507%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 1.36%)</title><rect x="51.7007%" y="133" width="1.3605%" height="15" fill="rgb(240,54,50)" fg:x="76" fg:w="2"/><text x="51.9507%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 1.36%)</title><rect x="51.7007%" y="117" width="1.3605%" height="15" fill="rgb(233,84,52)" fg:x="76" fg:w="2"/><text x="51.9507%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.68%)</title><rect x="52.3810%" y="101" width="0.6803%" height="15" fill="rgb(207,117,47)" fg:x="77" fg:w="1"/><text x="52.6310%" y="111.50"></text></g><g><title>server`minimal::Binding::join (2 samples, 1.36%)</title><rect x="53.0612%" y="181" width="1.3605%" height="15" fill="rgb(249,43,39)" fg:x="78" fg:w="2"/><text x="53.3112%" y="191.50"></text></g><g><title>server`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 1.36%)</title><rect x="53.0612%" y="165" width="1.3605%" height="15" fill="rgb(209,38,44)" fg:x="78" fg:w="2"/><text x="53.3112%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 1.36%)</title><rect x="53.0612%" y="149" width="1.3605%" height="15" fill="rgb(236,212,23)" fg:x="78" fg:w="2"/><text x="53.3112%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 1.36%)</title><rect x="53.0612%" y="133" width="1.3605%" height="15" fill="rgb(242,79,21)" fg:x="78" fg:w="2"/><text x="53.3112%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 1.36%)</title><rect x="53.0612%" y="117" width="1.3605%" height="15" fill="rgb(211,96,35)" fg:x="78" fg:w="2"/><text x="53.3112%" y="127.50"></text></g><g><title>server`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.68%)</title><rect x="57.1429%" y="165" width="0.6803%" height="15" fill="rgb(253,215,40)" fg:x="84" fg:w="1"/><text x="57.3929%" y="175.50"></text></g><g><title>server`alloc::raw_vec::finish_grow (1 samples, 0.68%)</title><rect x="57.1429%" y="149" width="0.6803%" height="15" fill="rgb(211,81,21)" fg:x="84" fg:w="1"/><text x="57.3929%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.68%)</title><rect x="57.1429%" y="133" width="0.6803%" height="15" fill="rgb(208,190,38)" fg:x="84" fg:w="1"/><text x="57.3929%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.68%)</title><rect x="57.1429%" y="117" width="0.6803%" height="15" fill="rgb(235,213,38)" fg:x="84" fg:w="1"/><text x="57.3929%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.68%)</title><rect x="57.1429%" y="101" width="0.6803%" height="15" fill="rgb(237,122,38)" fg:x="84" fg:w="1"/><text x="57.3929%" y="111.50"></text></g><g><title>server`minimal::ruleindex::RuleIndex::find_match (6 samples, 4.08%)</title><rect x="54.4218%" y="181" width="4.0816%" height="15" fill="rgb(244,218,35)" fg:x="80" fg:w="6"/><text x="54.6718%" y="191.50">serv..</text></g><g><title>server`core::hash::BuildHasher::hash_one (1 samples, 0.68%)</title><rect x="57.8231%" y="165" width="0.6803%" height="15" fill="rgb(240,68,47)" fg:x="85" fg:w="1"/><text x="58.0731%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.68%)</title><rect x="59.1837%" y="133" width="0.6803%" height="15" fill="rgb(210,16,53)" fg:x="87" fg:w="1"/><text x="59.4337%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.68%)</title><rect x="59.1837%" y="117" width="0.6803%" height="15" fill="rgb(235,124,12)" fg:x="87" fg:w="1"/><text x="59.4337%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.68%)</title><rect x="59.1837%" y="101" width="0.6803%" height="15" fill="rgb(224,169,11)" fg:x="87" fg:w="1"/><text x="59.4337%" y="111.50"></text></g><g><title>server`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.36%)</title><rect x="59.1837%" y="165" width="1.3605%" height="15" fill="rgb(250,166,2)" fg:x="87" fg:w="2"/><text x="59.4337%" y="175.50"></text></g><g><title>server`alloc::raw_vec::finish_grow (2 samples, 1.36%)</title><rect x="59.1837%" y="149" width="1.3605%" height="15" fill="rgb(242,216,29)" fg:x="87" fg:w="2"/><text x="59.4337%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.68%)</title><rect x="59.8639%" y="133" width="0.6803%" height="15" fill="rgb(230,116,27)" fg:x="88" fg:w="1"/><text x="60.1139%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.68%)</title><rect x="59.8639%" y="117" width="0.6803%" height="15" fill="rgb(228,99,48)" fg:x="88" fg:w="1"/><text x="60.1139%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.68%)</title><rect x="59.8639%" y="101" width="0.6803%" height="15" fill="rgb(253,11,6)" fg:x="88" fg:w="1"/><text x="60.1139%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.68%)</title><rect x="59.8639%" y="85" width="0.6803%" height="15" fill="rgb(247,143,39)" fg:x="88" fg:w="1"/><text x="60.1139%" y="95.50"></text></g><g><title>server`core::hash::BuildHasher::hash_one (12 samples, 8.16%)</title><rect x="60.5442%" y="165" width="8.1633%" height="15" fill="rgb(236,97,10)" fg:x="89" fg:w="12"/><text x="60.7942%" y="175.50">server`core..</text></g><g><title>server`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.68%)</title><rect x="68.0272%" y="149" width="0.6803%" height="15" fill="rgb(233,208,19)" fg:x="100" fg:w="1"/><text x="68.2772%" y="159.50"></text></g><g><title>server`minimal::tripleindex::TripleIndex::add (25 samples, 17.01%)</title><rect x="58.5034%" y="181" width="17.0068%" height="15" fill="rgb(216,164,2)" fg:x="86" fg:w="25"/><text x="58.7534%" y="191.50">server`minimal::tripleinde..</text></g><g><title>server`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 6.80%)</title><rect x="68.7075%" y="165" width="6.8027%" height="15" fill="rgb(220,129,5)" fg:x="101" fg:w="10"/><text x="68.9575%" y="175.50">server`ha..</text></g><g><title>server`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 6.80%)</title><rect x="68.7075%" y="149" width="6.8027%" height="15" fill="rgb(242,17,10)" fg:x="101" fg:w="10"/><text x="68.9575%" y="159.50">server`ha..</text></g><g><title>server`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 6.12%)</title><rect x="69.3878%" y="133" width="6.1224%" height="15" fill="rgb(242,107,0)" fg:x="102" fg:w="9"/><text x="69.6378%" y="143.50">server`h..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 1.36%)</title><rect x="74.1497%" y="117" width="1.3605%" height="15" fill="rgb(251,28,31)" fg:x="109" fg:w="2"/><text x="74.3997%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 1.36%)</title><rect x="74.1497%" y="101" width="1.3605%" height="15" fill="rgb(233,223,10)" fg:x="109" fg:w="2"/><text x="74.3997%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 1.36%)</title><rect x="74.1497%" y="85" width="1.3605%" height="15" fill="rgb(215,21,27)" fg:x="109" fg:w="2"/><text x="74.3997%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.68%)</title><rect x="74.8299%" y="69" width="0.6803%" height="15" fill="rgb(232,23,21)" fg:x="110" fg:w="1"/><text x="75.0799%" y="79.50"></text></g><g><title>server`core::hash::BuildHasher::hash_one (2 samples, 1.36%)</title><rect x="76.8707%" y="165" width="1.3605%" height="15" fill="rgb(244,5,23)" fg:x="113" fg:w="2"/><text x="77.1207%" y="175.50"></text></g><g><title>server`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.68%)</title><rect x="77.5510%" y="149" width="0.6803%" height="15" fill="rgb(226,81,46)" fg:x="114" fg:w="1"/><text x="77.8010%" y="159.50"></text></g><g><title>server`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.68%)</title><rect x="78.9116%" y="149" width="0.6803%" height="15" fill="rgb(247,70,30)" fg:x="116" fg:w="1"/><text x="79.1616%" y="159.50"></text></g><g><title>server`alloc::raw_vec::finish_grow (1 samples, 0.68%)</title><rect x="78.9116%" y="133" width="0.6803%" height="15" fill="rgb(212,68,19)" fg:x="116" fg:w="1"/><text x="79.1616%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.68%)</title><rect x="78.9116%" y="117" width="0.6803%" height="15" fill="rgb(240,187,13)" fg:x="116" fg:w="1"/><text x="79.1616%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.68%)</title><rect x="78.9116%" y="101" width="0.6803%" height="15" fill="rgb(223,113,26)" fg:x="116" fg:w="1"/><text x="79.1616%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.68%)</title><rect x="78.9116%" y="85" width="0.6803%" height="15" fill="rgb(206,192,2)" fg:x="116" fg:w="1"/><text x="79.1616%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.68%)</title><rect x="78.9116%" y="69" width="0.6803%" height="15" fill="rgb(241,108,4)" fg:x="116" fg:w="1"/><text x="79.1616%" y="79.50"></text></g><g><title>server`core::hash::BuildHasher::hash_one (1 samples, 0.68%)</title><rect x="79.5918%" y="149" width="0.6803%" height="15" fill="rgb(247,173,49)" fg:x="117" fg:w="1"/><text x="79.8418%" y="159.50"></text></g><g><title>server`core::hash::BuildHasher::hash_one (1 samples, 0.68%)</title><rect x="80.9524%" y="133" width="0.6803%" height="15" fill="rgb(224,114,35)" fg:x="119" fg:w="1"/><text x="81.2024%" y="143.50"></text></g><g><title>server`minimal::TripleStore::materialize (62 samples, 42.18%)</title><rect x="41.4966%" y="197" width="42.1769%" height="15" fill="rgb(245,159,27)" fg:x="61" fg:w="62"/><text x="41.7466%" y="207.50">server`minimal::TripleStore::materialize</text></g><g><title>server`minimal::tripleindex::TripleIndex::query (12 samples, 8.16%)</title><rect x="75.5102%" y="181" width="8.1633%" height="15" fill="rgb(245,172,44)" fg:x="111" fg:w="12"/><text x="75.7602%" y="191.50">server`mini..</text></g><g><title>server`minimal::Binding::add (8 samples, 5.44%)</title><rect x="78.2313%" y="165" width="5.4422%" height="15" fill="rgb(236,23,11)" fg:x="115" fg:w="8"/><text x="78.4813%" y="175.50">server`..</text></g><g><title>server`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 3.40%)</title><rect x="80.2721%" y="149" width="3.4014%" height="15" fill="rgb(205,117,38)" fg:x="118" fg:w="5"/><text x="80.5221%" y="159.50">ser..</text></g><g><title>server`hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 2.04%)</title><rect x="81.6327%" y="133" width="2.0408%" height="15" fill="rgb(237,72,25)" fg:x="120" fg:w="3"/><text x="81.8827%" y="143.50">s..</text></g><g><title>server`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 2.04%)</title><rect x="81.6327%" y="117" width="2.0408%" height="15" fill="rgb(244,70,9)" fg:x="120" fg:w="3"/><text x="81.8827%" y="127.50">s..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 1.36%)</title><rect x="82.3129%" y="101" width="1.3605%" height="15" fill="rgb(217,125,39)" fg:x="121" fg:w="2"/><text x="82.5629%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 1.36%)</title><rect x="82.3129%" y="85" width="1.3605%" height="15" fill="rgb(235,36,10)" fg:x="121" fg:w="2"/><text x="82.5629%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 1.36%)</title><rect x="82.3129%" y="69" width="1.3605%" height="15" fill="rgb(251,123,47)" fg:x="121" fg:w="2"/><text x="82.5629%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.68%)</title><rect x="83.6735%" y="165" width="0.6803%" height="15" fill="rgb(221,13,13)" fg:x="123" fg:w="1"/><text x="83.9235%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.68%)</title><rect x="83.6735%" y="149" width="0.6803%" height="15" fill="rgb(238,131,9)" fg:x="123" fg:w="1"/><text x="83.9235%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.68%)</title><rect x="83.6735%" y="133" width="0.6803%" height="15" fill="rgb(211,50,8)" fg:x="123" fg:w="1"/><text x="83.9235%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.68%)</title><rect x="84.3537%" y="165" width="0.6803%" height="15" fill="rgb(245,182,24)" fg:x="124" fg:w="1"/><text x="84.6037%" y="175.50"></text></g><g><title>server`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 1.36%)</title><rect x="85.0340%" y="165" width="1.3605%" height="15" fill="rgb(242,14,37)" fg:x="125" fg:w="2"/><text x="85.2840%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 1.36%)</title><rect x="85.0340%" y="149" width="1.3605%" height="15" fill="rgb(246,228,12)" fg:x="125" fg:w="2"/><text x="85.2840%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 1.36%)</title><rect x="85.0340%" y="133" width="1.3605%" height="15" fill="rgb(213,55,15)" fg:x="125" fg:w="2"/><text x="85.2840%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 1.36%)</title><rect x="85.0340%" y="117" width="1.3605%" height="15" fill="rgb(209,9,3)" fg:x="125" fg:w="2"/><text x="85.2840%" y="127.50"></text></g><g><title>server`core::hash::BuildHasher::hash_one (1 samples, 0.68%)</title><rect x="86.3946%" y="165" width="0.6803%" height="15" fill="rgb(230,59,30)" fg:x="127" fg:w="1"/><text x="86.6446%" y="175.50"></text></g><g><title>server`core::hash::BuildHasher::hash_one (1 samples, 0.68%)</title><rect x="87.7551%" y="149" width="0.6803%" height="15" fill="rgb(209,121,21)" fg:x="129" fg:w="1"/><text x="88.0051%" y="159.50"></text></g><g><title>server`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.68%)</title><rect x="87.7551%" y="133" width="0.6803%" height="15" fill="rgb(220,109,13)" fg:x="129" fg:w="1"/><text x="88.0051%" y="143.50"></text></g><g><title>server`minimal::VarOrTerm::newTerm (15 samples, 10.20%)</title><rect x="83.6735%" y="197" width="10.2041%" height="15" fill="rgb(232,18,1)" fg:x="123" fg:w="15"/><text x="83.9235%" y="207.50">server`minimal:..</text></g><g><title>server`minimal::Encoder::add (15 samples, 10.20%)</title><rect x="83.6735%" y="181" width="10.2041%" height="15" fill="rgb(215,41,42)" fg:x="123" fg:w="15"/><text x="83.9235%" y="191.50">server`minimal:..</text></g><g><title>server`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 6.80%)</title><rect x="87.0748%" y="165" width="6.8027%" height="15" fill="rgb(224,123,36)" fg:x="128" fg:w="10"/><text x="87.3248%" y="175.50">server`ha..</text></g><g><title>server`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 5.44%)</title><rect x="88.4354%" y="149" width="5.4422%" height="15" fill="rgb(240,125,3)" fg:x="130" fg:w="8"/><text x="88.6854%" y="159.50">server`..</text></g><g><title>server`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 5.44%)</title><rect x="88.4354%" y="133" width="5.4422%" height="15" fill="rgb(205,98,50)" fg:x="130" fg:w="8"/><text x="88.6854%" y="143.50">server`..</text></g><g><title>server`core::hash::BuildHasher::hash_one (3 samples, 2.04%)</title><rect x="91.8367%" y="117" width="2.0408%" height="15" fill="rgb(205,185,37)" fg:x="135" fg:w="3"/><text x="92.0867%" y="127.50">s..</text></g><g><title>server`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 1.36%)</title><rect x="92.5170%" y="101" width="1.3605%" height="15" fill="rgb(238,207,15)" fg:x="136" fg:w="2"/><text x="92.7670%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.68%)</title><rect x="94.5578%" y="165" width="0.6803%" height="15" fill="rgb(213,199,42)" fg:x="139" fg:w="1"/><text x="94.8078%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.68%)</title><rect x="94.5578%" y="149" width="0.6803%" height="15" fill="rgb(235,201,11)" fg:x="139" fg:w="1"/><text x="94.8078%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.68%)</title><rect x="94.5578%" y="133" width="0.6803%" height="15" fill="rgb(207,46,11)" fg:x="139" fg:w="1"/><text x="94.8078%" y="143.50"></text></g><g><title>server`minimal::VarOrTerm::newVar (4 samples, 2.72%)</title><rect x="93.8776%" y="197" width="2.7211%" height="15" fill="rgb(241,35,35)" fg:x="138" fg:w="4"/><text x="94.1276%" y="207.50">se..</text></g><g><title>server`minimal::Encoder::add (4 samples, 2.72%)</title><rect x="93.8776%" y="181" width="2.7211%" height="15" fill="rgb(243,32,47)" fg:x="138" fg:w="4"/><text x="94.1276%" y="191.50">se..</text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 1.36%)</title><rect x="95.2381%" y="165" width="1.3605%" height="15" fill="rgb(247,202,23)" fg:x="140" fg:w="2"/><text x="95.4881%" y="175.50"></text></g><g><title>server`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.68%)</title><rect x="97.9592%" y="181" width="0.6803%" height="15" fill="rgb(219,102,11)" fg:x="144" fg:w="1"/><text x="98.2092%" y="191.50"></text></g><g><title>server`alloc::raw_vec::finish_grow (1 samples, 0.68%)</title><rect x="97.9592%" y="165" width="0.6803%" height="15" fill="rgb(243,110,44)" fg:x="144" fg:w="1"/><text x="98.2092%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.68%)</title><rect x="97.9592%" y="149" width="0.6803%" height="15" fill="rgb(222,74,54)" fg:x="144" fg:w="1"/><text x="98.2092%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.68%)</title><rect x="97.9592%" y="133" width="0.6803%" height="15" fill="rgb(216,99,12)" fg:x="144" fg:w="1"/><text x="98.2092%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.68%)</title><rect x="97.9592%" y="117" width="0.6803%" height="15" fill="rgb(226,22,26)" fg:x="144" fg:w="1"/><text x="98.2092%" y="127.50"></text></g><g><title>0x1 (146 samples, 99.32%)</title><rect x="0.0000%" y="309" width="99.3197%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="146"/><text x="0.2500%" y="319.50">0x1</text></g><g><title>libdyld.dylib`start (146 samples, 99.32%)</title><rect x="0.0000%" y="293" width="99.3197%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="146"/><text x="0.2500%" y="303.50">libdyld.dylib`start</text></g><g><title>server`main (142 samples, 96.60%)</title><rect x="2.7211%" y="277" width="96.5986%" height="15" fill="rgb(252,105,26)" fg:x="4" fg:w="142"/><text x="2.9711%" y="287.50">server`main</text></g><g><title>server`std::rt::lang_start_internal (142 samples, 96.60%)</title><rect x="2.7211%" y="261" width="96.5986%" height="15" fill="rgb(220,39,43)" fg:x="4" fg:w="142"/><text x="2.9711%" y="271.50">server`std::rt::lang_start_internal</text></g><g><title>server`std::rt::lang_start::_{{closure}} (142 samples, 96.60%)</title><rect x="2.7211%" y="245" width="96.5986%" height="15" fill="rgb(229,68,48)" fg:x="4" fg:w="142"/><text x="2.9711%" y="255.50">server`std::rt::lang_start::_{{closure}}</text></g><g><title>server`std::sys_common::backtrace::__rust_begin_short_backtrace (142 samples, 96.60%)</title><rect x="2.7211%" y="229" width="96.5986%" height="15" fill="rgb(252,8,32)" fg:x="4" fg:w="142"/><text x="2.9711%" y="239.50">server`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>server`server::main (142 samples, 96.60%)</title><rect x="2.7211%" y="213" width="96.5986%" height="15" fill="rgb(223,20,43)" fg:x="4" fg:w="142"/><text x="2.9711%" y="223.50">server`server::main</text></g><g><title>server`minimal::ruleindex::RuleIndex::add (4 samples, 2.72%)</title><rect x="96.5986%" y="197" width="2.7211%" height="15" fill="rgb(229,81,49)" fg:x="142" fg:w="4"/><text x="96.8486%" y="207.50">se..</text></g><g><title>server`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.68%)</title><rect x="98.6395%" y="181" width="0.6803%" height="15" fill="rgb(236,28,36)" fg:x="145" fg:w="1"/><text x="98.8895%" y="191.50"></text></g><g><title>server`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.68%)</title><rect x="98.6395%" y="165" width="0.6803%" height="15" fill="rgb(249,185,26)" fg:x="145" fg:w="1"/><text x="98.8895%" y="175.50"></text></g><g><title>server`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.68%)</title><rect x="98.6395%" y="149" width="0.6803%" height="15" fill="rgb(249,174,33)" fg:x="145" fg:w="1"/><text x="98.8895%" y="159.50"></text></g><g><title>all (147 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="147"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.68%)</title><rect x="99.3197%" y="309" width="0.6803%" height="15" fill="rgb(221,78,26)" fg:x="146" fg:w="1"/><text x="99.5697%" y="319.50"></text></g></svg></svg>