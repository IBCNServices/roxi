<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="16992"><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="0.0000%" y="261" width="0.0235%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.02%)</title><rect x="0.0059%" y="245" width="0.0177%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="3"/><text x="0.2559%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="0.0118%" y="229" width="0.0118%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.2618%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.01%)</title><rect x="0.0353%" y="213" width="0.0118%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="2"/><text x="0.2853%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="0.0353%" y="197" width="0.0118%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="2"/><text x="0.2853%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`core::fmt::write (5 samples, 0.03%)</title><rect x="0.0235%" y="245" width="0.0294%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="5"/><text x="0.2735%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (3 samples, 0.02%)</title><rect x="0.0353%" y="229" width="0.0177%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="3"/><text x="0.2853%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::fmt::format (7 samples, 0.04%)</title><rect x="0.0235%" y="261" width="0.0412%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="7"/><text x="0.2735%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="0.0530%" y="245" width="0.0118%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="2"/><text x="0.3030%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="0.0530%" y="229" width="0.0118%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="2"/><text x="0.3030%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="0.0530%" y="213" width="0.0118%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="2"/><text x="0.3030%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.08%)</title><rect x="0.1295%" y="213" width="0.0824%" height="15" fill="rgb(240,193,28)" fg:x="22" fg:w="14"/><text x="0.3795%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.06%)</title><rect x="0.1471%" y="197" width="0.0647%" height="15" fill="rgb(216,20,37)" fg:x="25" fg:w="11"/><text x="0.3971%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.13%)</title><rect x="0.0883%" y="229" width="0.1295%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="22"/><text x="0.3383%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="0.2413%" y="213" width="0.0118%" height="15" fill="rgb(217,207,13)" fg:x="41" fg:w="2"/><text x="0.4913%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.05%)</title><rect x="0.2177%" y="229" width="0.0471%" height="15" fill="rgb(231,73,38)" fg:x="37" fg:w="8"/><text x="0.4677%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="0.2531%" y="213" width="0.0118%" height="15" fill="rgb(225,20,46)" fg:x="43" fg:w="2"/><text x="0.5031%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="0.3766%" y="213" width="0.0118%" height="15" fill="rgb(210,31,41)" fg:x="64" fg:w="2"/><text x="0.6266%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.09%)</title><rect x="0.6650%" y="197" width="0.0883%" height="15" fill="rgb(221,200,47)" fg:x="113" fg:w="15"/><text x="0.9150%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (104 samples, 0.61%)</title><rect x="0.2648%" y="229" width="0.6121%" height="15" fill="rgb(226,26,5)" fg:x="45" fg:w="104"/><text x="0.5148%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (83 samples, 0.49%)</title><rect x="0.3884%" y="213" width="0.4885%" height="15" fill="rgb(249,33,26)" fg:x="66" fg:w="83"/><text x="0.6384%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (21 samples, 0.12%)</title><rect x="0.7533%" y="197" width="0.1236%" height="15" fill="rgb(235,183,28)" fg:x="128" fg:w="21"/><text x="1.0033%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (139 samples, 0.82%)</title><rect x="0.0647%" y="245" width="0.8180%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="139"/><text x="0.3147%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="0.9004%" y="245" width="0.0118%" height="15" fill="rgb(247,18,42)" fg:x="153" fg:w="2"/><text x="1.1504%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`core::ptr::drop_in_place&lt;minimal::TripleStore&gt; (148 samples, 0.87%)</title><rect x="0.0647%" y="261" width="0.8710%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="148"/><text x="0.3147%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.02%)</title><rect x="0.9181%" y="245" width="0.0177%" height="15" fill="rgb(249,31,29)" fg:x="156" fg:w="3"/><text x="1.1681%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.9769%" y="197" width="0.0118%" height="15" fill="rgb(225,111,53)" fg:x="166" fg:w="2"/><text x="1.2269%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.03%)</title><rect x="0.9710%" y="213" width="0.0294%" height="15" fill="rgb(238,160,17)" fg:x="165" fg:w="5"/><text x="1.2210%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="0.9887%" y="197" width="0.0118%" height="15" fill="rgb(214,148,48)" fg:x="168" fg:w="2"/><text x="1.2387%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="0.9887%" y="181" width="0.0118%" height="15" fill="rgb(232,36,49)" fg:x="168" fg:w="2"/><text x="1.2387%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="0.9887%" y="165" width="0.0118%" height="15" fill="rgb(209,103,24)" fg:x="168" fg:w="2"/><text x="1.2387%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.02%)</title><rect x="1.0005%" y="197" width="0.0177%" height="15" fill="rgb(229,88,8)" fg:x="170" fg:w="3"/><text x="1.2505%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.02%)</title><rect x="1.0005%" y="181" width="0.0177%" height="15" fill="rgb(213,181,19)" fg:x="170" fg:w="3"/><text x="1.2505%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="1.0005%" y="165" width="0.0177%" height="15" fill="rgb(254,191,54)" fg:x="170" fg:w="3"/><text x="1.2505%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.0064%" y="149" width="0.0118%" height="15" fill="rgb(241,83,37)" fg:x="171" fg:w="2"/><text x="1.2564%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="1.0064%" y="133" width="0.0118%" height="15" fill="rgb(233,36,39)" fg:x="171" fg:w="2"/><text x="1.2564%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="1.0064%" y="117" width="0.0118%" height="15" fill="rgb(226,3,54)" fg:x="171" fg:w="2"/><text x="1.2564%" y="127.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="1.0240%" y="181" width="0.0118%" height="15" fill="rgb(245,192,40)" fg:x="174" fg:w="2"/><text x="1.2740%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.0240%" y="165" width="0.0118%" height="15" fill="rgb(238,167,29)" fg:x="174" fg:w="2"/><text x="1.2740%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="1.0358%" y="181" width="0.0118%" height="15" fill="rgb(232,182,51)" fg:x="176" fg:w="2"/><text x="1.2858%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.03%)</title><rect x="1.0476%" y="181" width="0.0294%" height="15" fill="rgb(231,60,39)" fg:x="178" fg:w="5"/><text x="1.2976%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.02%)</title><rect x="1.0534%" y="165" width="0.0235%" height="15" fill="rgb(208,69,12)" fg:x="179" fg:w="4"/><text x="1.3034%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.02%)</title><rect x="1.0593%" y="149" width="0.0177%" height="15" fill="rgb(235,93,37)" fg:x="180" fg:w="3"/><text x="1.3093%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="1.0652%" y="133" width="0.0118%" height="15" fill="rgb(213,116,39)" fg:x="181" fg:w="2"/><text x="1.3152%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="1.0652%" y="117" width="0.0118%" height="15" fill="rgb(222,207,29)" fg:x="181" fg:w="2"/><text x="1.3152%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.01%)</title><rect x="1.0652%" y="101" width="0.0118%" height="15" fill="rgb(206,96,30)" fg:x="181" fg:w="2"/><text x="1.3152%" y="111.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::encoding::Encoder::add (12 samples, 0.07%)</title><rect x="1.0181%" y="197" width="0.0706%" height="15" fill="rgb(218,138,4)" fg:x="173" fg:w="12"/><text x="1.2681%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="1.0770%" y="181" width="0.0118%" height="15" fill="rgb(250,191,14)" fg:x="183" fg:w="2"/><text x="1.3270%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::parser::Parser::parse_triple (24 samples, 0.14%)</title><rect x="0.9534%" y="229" width="0.1412%" height="15" fill="rgb(239,60,40)" fg:x="162" fg:w="24"/><text x="1.2034%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::parser::Parser::parse_triple::_{{closure}} (16 samples, 0.09%)</title><rect x="1.0005%" y="213" width="0.0942%" height="15" fill="rgb(206,27,48)" fg:x="170" fg:w="16"/><text x="1.2505%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::parser::Parser::parse (28 samples, 0.16%)</title><rect x="0.9357%" y="245" width="0.1648%" height="15" fill="rgb(225,35,8)" fg:x="159" fg:w="28"/><text x="1.1857%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.02%)</title><rect x="1.1123%" y="229" width="0.0235%" height="15" fill="rgb(250,213,24)" fg:x="189" fg:w="4"/><text x="1.3623%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="1.1182%" y="213" width="0.0177%" height="15" fill="rgb(247,123,22)" fg:x="190" fg:w="3"/><text x="1.3682%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="1.1182%" y="197" width="0.0177%" height="15" fill="rgb(231,138,38)" fg:x="190" fg:w="3"/><text x="1.3682%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="1.1182%" y="181" width="0.0177%" height="15" fill="rgb(231,145,46)" fg:x="190" fg:w="3"/><text x="1.3682%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="1.1241%" y="165" width="0.0118%" height="15" fill="rgb(251,118,11)" fg:x="191" fg:w="2"/><text x="1.3741%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (7 samples, 0.04%)</title><rect x="1.1358%" y="229" width="0.0412%" height="15" fill="rgb(217,147,25)" fg:x="193" fg:w="7"/><text x="1.3858%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::TripleStore::from (51 samples, 0.30%)</title><rect x="0.9357%" y="261" width="0.3001%" height="15" fill="rgb(247,81,37)" fg:x="159" fg:w="51"/><text x="1.1857%" y="271.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::tripleindex::TripleIndex::add (23 samples, 0.14%)</title><rect x="1.1005%" y="245" width="0.1354%" height="15" fill="rgb(209,12,38)" fg:x="187" fg:w="23"/><text x="1.3505%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.06%)</title><rect x="1.1770%" y="229" width="0.0589%" height="15" fill="rgb(227,1,9)" fg:x="200" fg:w="10"/><text x="1.4270%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.05%)</title><rect x="1.1829%" y="213" width="0.0530%" height="15" fill="rgb(248,47,43)" fg:x="201" fg:w="9"/><text x="1.4329%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.04%)</title><rect x="1.1947%" y="197" width="0.0412%" height="15" fill="rgb(221,10,30)" fg:x="203" fg:w="7"/><text x="1.4447%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="1.2123%" y="181" width="0.0235%" height="15" fill="rgb(210,229,1)" fg:x="206" fg:w="4"/><text x="1.4623%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="1.2123%" y="165" width="0.0235%" height="15" fill="rgb(222,148,37)" fg:x="206" fg:w="4"/><text x="1.4623%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="1.2123%" y="149" width="0.0235%" height="15" fill="rgb(234,67,33)" fg:x="206" fg:w="4"/><text x="1.4623%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="1.2359%" y="245" width="0.0353%" height="15" fill="rgb(247,98,35)" fg:x="210" fg:w="6"/><text x="1.4859%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_dealloc (8 samples, 0.05%)</title><rect x="1.2712%" y="245" width="0.0471%" height="15" fill="rgb(247,138,52)" fg:x="216" fg:w="8"/><text x="1.5212%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.01%)</title><rect x="1.3242%" y="245" width="0.0118%" height="15" fill="rgb(213,79,30)" fg:x="225" fg:w="2"/><text x="1.5742%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::bindings::Binding::join (4 samples, 0.02%)</title><rect x="1.3359%" y="245" width="0.0235%" height="15" fill="rgb(246,177,23)" fg:x="227" fg:w="4"/><text x="1.5859%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="4.0313%" y="197" width="0.0177%" height="15" fill="rgb(230,62,27)" fg:x="685" fg:w="3"/><text x="4.2813%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_dealloc (6 samples, 0.04%)</title><rect x="4.0490%" y="197" width="0.0353%" height="15" fill="rgb(216,154,8)" fg:x="688" fg:w="6"/><text x="4.2990%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.06%)</title><rect x="4.6257%" y="181" width="0.0647%" height="15" fill="rgb(244,35,45)" fg:x="786" fg:w="11"/><text x="4.8757%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (45 samples, 0.26%)</title><rect x="5.0141%" y="149" width="0.2648%" height="15" fill="rgb(251,115,12)" fg:x="852" fg:w="45"/><text x="5.2641%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (38 samples, 0.22%)</title><rect x="5.0553%" y="133" width="0.2236%" height="15" fill="rgb(240,54,50)" fg:x="859" fg:w="38"/><text x="5.3053%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (84 samples, 0.49%)</title><rect x="4.8140%" y="165" width="0.4944%" height="15" fill="rgb(233,84,52)" fg:x="818" fg:w="84"/><text x="5.0640%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.03%)</title><rect x="5.2790%" y="149" width="0.0294%" height="15" fill="rgb(207,117,47)" fg:x="897" fg:w="5"/><text x="5.5290%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (65 samples, 0.38%)</title><rect x="6.4383%" y="133" width="0.3825%" height="15" fill="rgb(249,43,39)" fg:x="1094" fg:w="65"/><text x="6.6883%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (272 samples, 1.60%)</title><rect x="5.3084%" y="165" width="1.6008%" height="15" fill="rgb(209,38,44)" fg:x="902" fg:w="272"/><text x="5.5584%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (177 samples, 1.04%)</title><rect x="5.8675%" y="149" width="1.0417%" height="15" fill="rgb(236,212,23)" fg:x="997" fg:w="177"/><text x="6.1175%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (15 samples, 0.09%)</title><rect x="6.8209%" y="133" width="0.0883%" height="15" fill="rgb(242,79,21)" fg:x="1159" fg:w="15"/><text x="7.0709%" y="143.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (379 samples, 2.23%)</title><rect x="4.6904%" y="181" width="2.2305%" height="15" fill="rgb(211,96,35)" fg:x="797" fg:w="379"/><text x="4.9404%" y="191.50">b..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="6.9091%" y="165" width="0.0118%" height="15" fill="rgb(253,215,40)" fg:x="1174" fg:w="2"/><text x="7.1591%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_alloc (2 samples, 0.01%)</title><rect x="7.0092%" y="165" width="0.0118%" height="15" fill="rgb(211,81,21)" fg:x="1191" fg:w="2"/><text x="7.2592%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.02%)</title><rect x="7.2328%" y="117" width="0.0177%" height="15" fill="rgb(208,190,38)" fg:x="1229" fg:w="3"/><text x="7.4828%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (28 samples, 0.16%)</title><rect x="7.7742%" y="101" width="0.1648%" height="15" fill="rgb(235,213,38)" fg:x="1321" fg:w="28"/><text x="8.0242%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="7.9390%" y="101" width="0.0118%" height="15" fill="rgb(237,122,38)" fg:x="1349" fg:w="2"/><text x="8.1890%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (193 samples, 1.14%)</title><rect x="7.1798%" y="133" width="1.1358%" height="15" fill="rgb(244,218,35)" fg:x="1220" fg:w="193"/><text x="7.4298%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (181 samples, 1.07%)</title><rect x="7.2505%" y="117" width="1.0652%" height="15" fill="rgb(240,68,47)" fg:x="1232" fg:w="181"/><text x="7.5005%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (62 samples, 0.36%)</title><rect x="7.9508%" y="101" width="0.3649%" height="15" fill="rgb(210,16,53)" fg:x="1351" fg:w="62"/><text x="8.2008%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.09%)</title><rect x="8.2215%" y="85" width="0.0942%" height="15" fill="rgb(235,124,12)" fg:x="1397" fg:w="16"/><text x="8.4715%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (210 samples, 1.24%)</title><rect x="7.0857%" y="149" width="1.2359%" height="15" fill="rgb(224,169,11)" fg:x="1204" fg:w="210"/><text x="7.3357%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="8.3216%" y="149" width="0.0118%" height="15" fill="rgb(250,166,2)" fg:x="1414" fg:w="2"/><text x="8.5716%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (226 samples, 1.33%)</title><rect x="7.0268%" y="165" width="1.3300%" height="15" fill="rgb(242,216,29)" fg:x="1194" fg:w="226"/><text x="7.2768%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="8.3392%" y="149" width="0.0177%" height="15" fill="rgb(230,116,27)" fg:x="1417" fg:w="3"/><text x="8.5892%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (246 samples, 1.45%)</title><rect x="6.9209%" y="181" width="1.4477%" height="15" fill="rgb(228,99,48)" fg:x="1176" fg:w="246"/><text x="7.1709%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="8.3745%" y="181" width="0.0294%" height="15" fill="rgb(253,11,6)" fg:x="1423" fg:w="5"/><text x="8.6245%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.09%)</title><rect x="9.6045%" y="165" width="0.0883%" height="15" fill="rgb(247,143,39)" fg:x="1632" fg:w="15"/><text x="9.8545%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.04%)</title><rect x="9.6928%" y="165" width="0.0412%" height="15" fill="rgb(236,97,10)" fg:x="1647" fg:w="7"/><text x="9.9428%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_alloc (6 samples, 0.04%)</title><rect x="9.9105%" y="149" width="0.0353%" height="15" fill="rgb(233,208,19)" fg:x="1684" fg:w="6"/><text x="10.1605%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`__rust_alloc (5 samples, 0.03%)</title><rect x="9.9459%" y="149" width="0.0294%" height="15" fill="rgb(216,164,2)" fg:x="1690" fg:w="5"/><text x="10.1959%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.05%)</title><rect x="11.6525%" y="85" width="0.0471%" height="15" fill="rgb(220,129,5)" fg:x="1980" fg:w="8"/><text x="11.9025%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (304 samples, 1.79%)</title><rect x="10.0636%" y="133" width="1.7891%" height="15" fill="rgb(242,17,10)" fg:x="1710" fg:w="304"/><text x="10.3136%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (283 samples, 1.67%)</title><rect x="10.1871%" y="117" width="1.6655%" height="15" fill="rgb(242,107,0)" fg:x="1731" fg:w="283"/><text x="10.4371%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (271 samples, 1.59%)</title><rect x="10.2578%" y="101" width="1.5949%" height="15" fill="rgb(251,28,31)" fg:x="1743" fg:w="271"/><text x="10.5078%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (26 samples, 0.15%)</title><rect x="11.6996%" y="85" width="0.1530%" height="15" fill="rgb(233,223,10)" fg:x="1988" fg:w="26"/><text x="11.9496%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.04%)</title><rect x="11.8114%" y="69" width="0.0412%" height="15" fill="rgb(215,21,27)" fg:x="2007" fg:w="7"/><text x="12.0614%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="11.8526%" y="133" width="0.0118%" height="15" fill="rgb(232,23,21)" fg:x="2014" fg:w="2"/><text x="12.1026%" y="143.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (329 samples, 1.94%)</title><rect x="9.9753%" y="149" width="1.9362%" height="15" fill="rgb(244,5,23)" fg:x="1695" fg:w="329"/><text x="10.2253%" y="159.50">b..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.05%)</title><rect x="11.8644%" y="133" width="0.0471%" height="15" fill="rgb(226,81,46)" fg:x="2016" fg:w="8"/><text x="12.1144%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="11.9115%" y="149" width="0.0118%" height="15" fill="rgb(247,70,30)" fg:x="2024" fg:w="2"/><text x="12.1615%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (373 samples, 2.20%)</title><rect x="9.7340%" y="165" width="2.1952%" height="15" fill="rgb(212,68,19)" fg:x="1654" fg:w="373"/><text x="9.9840%" y="175.50">b..</text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="11.9291%" y="165" width="0.0118%" height="15" fill="rgb(240,187,13)" fg:x="2027" fg:w="2"/><text x="12.1791%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::reasoner::Reasoner::substitute_triple_with_bindings (748 samples, 4.40%)</title><rect x="8.4098%" y="181" width="4.4021%" height="15" fill="rgb(223,113,26)" fg:x="1429" fg:w="748"/><text x="8.6598%" y="191.50">bench..</text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (148 samples, 0.87%)</title><rect x="11.9409%" y="165" width="0.8710%" height="15" fill="rgb(206,192,2)" fg:x="2029" fg:w="148"/><text x="12.1909%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (54 samples, 0.32%)</title><rect x="12.4941%" y="149" width="0.3178%" height="15" fill="rgb(241,108,4)" fg:x="2123" fg:w="54"/><text x="12.7441%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.02%)</title><rect x="12.9120%" y="165" width="0.0177%" height="15" fill="rgb(247,173,49)" fg:x="2194" fg:w="3"/><text x="13.1620%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="13.1650%" y="149" width="0.0118%" height="15" fill="rgb(224,114,35)" fg:x="2237" fg:w="2"/><text x="13.4150%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_alloc (4 samples, 0.02%)</title><rect x="13.2415%" y="133" width="0.0235%" height="15" fill="rgb(245,159,27)" fg:x="2250" fg:w="4"/><text x="13.4915%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.01%)</title><rect x="13.5358%" y="85" width="0.0118%" height="15" fill="rgb(245,172,44)" fg:x="2300" fg:w="2"/><text x="13.7858%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (23 samples, 0.14%)</title><rect x="14.4480%" y="69" width="0.1354%" height="15" fill="rgb(236,23,11)" fg:x="2455" fg:w="23"/><text x="14.6980%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (270 samples, 1.59%)</title><rect x="13.3592%" y="117" width="1.5890%" height="15" fill="rgb(205,117,38)" fg:x="2270" fg:w="270"/><text x="13.6092%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (257 samples, 1.51%)</title><rect x="13.4357%" y="101" width="1.5125%" height="15" fill="rgb(237,72,25)" fg:x="2283" fg:w="257"/><text x="13.6857%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (238 samples, 1.40%)</title><rect x="13.5476%" y="85" width="1.4007%" height="15" fill="rgb(244,70,9)" fg:x="2302" fg:w="238"/><text x="13.7976%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (61 samples, 0.36%)</title><rect x="14.5892%" y="69" width="0.3590%" height="15" fill="rgb(217,125,39)" fg:x="2479" fg:w="61"/><text x="14.8392%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.06%)</title><rect x="14.8835%" y="53" width="0.0647%" height="15" fill="rgb(235,36,10)" fg:x="2529" fg:w="11"/><text x="15.1335%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="14.9482%" y="117" width="0.0118%" height="15" fill="rgb(251,123,47)" fg:x="2540" fg:w="2"/><text x="15.1982%" y="127.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (288 samples, 1.69%)</title><rect x="13.2710%" y="133" width="1.6949%" height="15" fill="rgb(221,13,13)" fg:x="2255" fg:w="288"/><text x="13.5210%" y="143.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (306 samples, 1.80%)</title><rect x="13.1768%" y="149" width="1.8008%" height="15" fill="rgb(238,131,9)" fg:x="2239" fg:w="306"/><text x="13.4268%" y="159.50">b..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="14.9659%" y="133" width="0.0118%" height="15" fill="rgb(211,50,8)" fg:x="2543" fg:w="2"/><text x="15.2159%" y="143.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (4 samples, 0.02%)</title><rect x="14.9776%" y="149" width="0.0235%" height="15" fill="rgb(245,182,24)" fg:x="2545" fg:w="4"/><text x="15.2276%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (83 samples, 0.49%)</title><rect x="15.0012%" y="149" width="0.4885%" height="15" fill="rgb(242,14,37)" fg:x="2549" fg:w="83"/><text x="15.2512%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.17%)</title><rect x="15.3190%" y="133" width="0.1707%" height="15" fill="rgb(246,228,12)" fg:x="2603" fg:w="29"/><text x="15.5690%" y="143.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="15.6603%" y="133" width="0.0235%" height="15" fill="rgb(213,55,15)" fg:x="2661" fg:w="4"/><text x="15.9103%" y="143.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (70 samples, 0.41%)</title><rect x="15.6839%" y="133" width="0.4120%" height="15" fill="rgb(209,9,3)" fg:x="2665" fg:w="70"/><text x="15.9339%" y="143.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.13%)</title><rect x="15.9663%" y="117" width="0.1295%" height="15" fill="rgb(230,59,30)" fg:x="2713" fg:w="22"/><text x="16.2163%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.05%)</title><rect x="17.1492%" y="53" width="0.0530%" height="15" fill="rgb(209,121,21)" fg:x="2914" fg:w="9"/><text x="17.3992%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (127 samples, 0.75%)</title><rect x="16.5784%" y="101" width="0.7474%" height="15" fill="rgb(220,109,13)" fg:x="2817" fg:w="127"/><text x="16.8284%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (121 samples, 0.71%)</title><rect x="16.6137%" y="85" width="0.7121%" height="15" fill="rgb(232,18,1)" fg:x="2823" fg:w="121"/><text x="16.8637%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (115 samples, 0.68%)</title><rect x="16.6490%" y="69" width="0.6768%" height="15" fill="rgb(215,41,42)" fg:x="2829" fg:w="115"/><text x="16.8990%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.12%)</title><rect x="17.2081%" y="53" width="0.1177%" height="15" fill="rgb(224,123,36)" fg:x="2924" fg:w="20"/><text x="17.4581%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.05%)</title><rect x="17.2787%" y="37" width="0.0471%" height="15" fill="rgb(240,125,3)" fg:x="2936" fg:w="8"/><text x="17.5287%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="17.3258%" y="101" width="0.0118%" height="15" fill="rgb(205,98,50)" fg:x="2944" fg:w="2"/><text x="17.5758%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="17.3376%" y="101" width="0.0177%" height="15" fill="rgb(205,185,37)" fg:x="2946" fg:w="3"/><text x="17.5876%" y="111.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (163 samples, 0.96%)</title><rect x="16.4254%" y="117" width="0.9593%" height="15" fill="rgb(238,207,15)" fg:x="2791" fg:w="163"/><text x="16.6754%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="17.3552%" y="101" width="0.0294%" height="15" fill="rgb(213,199,42)" fg:x="2949" fg:w="5"/><text x="17.6052%" y="111.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::insert (220 samples, 1.29%)</title><rect x="16.0958%" y="133" width="1.2947%" height="15" fill="rgb(235,201,11)" fg:x="2735" fg:w="220"/><text x="16.3458%" y="143.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::bindings::Binding::add (760 samples, 4.47%)</title><rect x="12.9296%" y="165" width="4.4727%" height="15" fill="rgb(207,46,11)" fg:x="2197" fg:w="760"/><text x="13.1796%" y="175.50">bench..</text></g><g><title>bench-913d788d6c26c7be`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (325 samples, 1.91%)</title><rect x="15.4896%" y="149" width="1.9127%" height="15" fill="rgb(241,35,35)" fg:x="2632" fg:w="325"/><text x="15.7396%" y="159.50">b..</text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.01%)</title><rect x="17.3905%" y="133" width="0.0118%" height="15" fill="rgb(243,32,47)" fg:x="2955" fg:w="2"/><text x="17.6405%" y="143.50"></text></g><g><title>bench-913d788d6c26c7be`std::collections::hash::map::RandomState::new::KEYS::__getit (5 samples, 0.03%)</title><rect x="17.4023%" y="165" width="0.0294%" height="15" fill="rgb(247,202,23)" fg:x="2957" fg:w="5"/><text x="17.6523%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::reasoner::query (797 samples, 4.69%)</title><rect x="12.8119%" y="181" width="4.6904%" height="15" fill="rgb(219,102,11)" fg:x="2177" fg:w="797"/><text x="13.0619%" y="191.50">bench..</text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.07%)</title><rect x="17.4317%" y="165" width="0.0706%" height="15" fill="rgb(243,110,44)" fg:x="2962" fg:w="12"/><text x="17.6817%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`std::collections::hash::map::RandomState::new::KEYS::__getit (2 samples, 0.01%)</title><rect x="17.5024%" y="181" width="0.0118%" height="15" fill="rgb(222,74,54)" fg:x="2974" fg:w="2"/><text x="17.7524%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="17.5141%" y="181" width="0.0118%" height="15" fill="rgb(216,99,12)" fg:x="2976" fg:w="2"/><text x="17.7641%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (89 samples, 0.52%)</title><rect x="17.8555%" y="165" width="0.5238%" height="15" fill="rgb(226,22,26)" fg:x="3034" fg:w="89"/><text x="18.1055%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (80 samples, 0.47%)</title><rect x="17.9084%" y="149" width="0.4708%" height="15" fill="rgb(217,163,10)" fg:x="3043" fg:w="80"/><text x="18.1584%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (148 samples, 0.87%)</title><rect x="17.5259%" y="181" width="0.8710%" height="15" fill="rgb(213,25,53)" fg:x="2978" fg:w="148"/><text x="17.7759%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.02%)</title><rect x="18.3792%" y="165" width="0.0177%" height="15" fill="rgb(252,105,26)" fg:x="3123" fg:w="3"/><text x="18.6292%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (34 samples, 0.20%)</title><rect x="19.7505%" y="149" width="0.2001%" height="15" fill="rgb(220,39,43)" fg:x="3356" fg:w="34"/><text x="20.0005%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (267 samples, 1.57%)</title><rect x="18.3969%" y="181" width="1.5713%" height="15" fill="rgb(229,68,48)" fg:x="3126" fg:w="267"/><text x="18.6469%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (84 samples, 0.49%)</title><rect x="19.4739%" y="165" width="0.4944%" height="15" fill="rgb(252,8,32)" fg:x="3309" fg:w="84"/><text x="19.7239%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.02%)</title><rect x="19.9506%" y="149" width="0.0177%" height="15" fill="rgb(223,20,43)" fg:x="3390" fg:w="3"/><text x="20.2006%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (5 samples, 0.03%)</title><rect x="19.9682%" y="181" width="0.0294%" height="15" fill="rgb(229,81,49)" fg:x="3393" fg:w="5"/><text x="20.2182%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,711 samples, 15.95%)</title><rect x="4.0902%" y="197" width="15.9546%" height="15" fill="rgb(236,28,36)" fg:x="695" fg:w="2711"/><text x="4.3402%" y="207.50">bench-913d788d6c26c7be`co..</text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.05%)</title><rect x="19.9976%" y="181" width="0.0471%" height="15" fill="rgb(249,185,26)" fg:x="3398" fg:w="8"/><text x="20.2476%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::reasoner::Reasoner::substitute_triple_with_bindings (2 samples, 0.01%)</title><rect x="20.0447%" y="197" width="0.0118%" height="15" fill="rgb(249,174,33)" fg:x="3406" fg:w="2"/><text x="20.2947%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.04%)</title><rect x="20.0624%" y="197" width="0.0412%" height="15" fill="rgb(233,201,37)" fg:x="3409" fg:w="7"/><text x="20.3124%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.07%)</title><rect x="20.1036%" y="197" width="0.0706%" height="15" fill="rgb(221,78,26)" fg:x="3416" fg:w="12"/><text x="20.3536%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="20.1507%" y="181" width="0.0235%" height="15" fill="rgb(250,127,30)" fg:x="3424" fg:w="4"/><text x="20.4007%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.02%)</title><rect x="20.1565%" y="165" width="0.0177%" height="15" fill="rgb(230,49,44)" fg:x="3425" fg:w="3"/><text x="20.4065%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.05%)</title><rect x="20.4508%" y="165" width="0.0471%" height="15" fill="rgb(229,67,23)" fg:x="3475" fg:w="8"/><text x="20.7008%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (64 samples, 0.38%)</title><rect x="20.1742%" y="197" width="0.3766%" height="15" fill="rgb(249,83,47)" fg:x="3428" fg:w="64"/><text x="20.4242%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 0.28%)</title><rect x="20.2742%" y="181" width="0.2766%" height="15" fill="rgb(215,43,3)" fg:x="3445" fg:w="47"/><text x="20.5242%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.05%)</title><rect x="20.4979%" y="165" width="0.0530%" height="15" fill="rgb(238,154,13)" fg:x="3483" fg:w="9"/><text x="20.7479%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,862 samples, 16.84%)</title><rect x="3.7606%" y="213" width="16.8432%" height="15" fill="rgb(219,56,2)" fg:x="639" fg:w="2862"/><text x="4.0106%" y="223.50">bench-913d788d6c26c7be`&lt;co..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (9 samples, 0.05%)</title><rect x="20.5508%" y="197" width="0.0530%" height="15" fill="rgb(233,0,4)" fg:x="3492" fg:w="9"/><text x="20.8008%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.05%)</title><rect x="20.8569%" y="165" width="0.0471%" height="15" fill="rgb(235,30,7)" fg:x="3544" fg:w="8"/><text x="21.1069%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (71 samples, 0.42%)</title><rect x="20.6097%" y="213" width="0.4178%" height="15" fill="rgb(250,79,13)" fg:x="3502" fg:w="71"/><text x="20.8597%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (67 samples, 0.39%)</title><rect x="20.6332%" y="197" width="0.3943%" height="15" fill="rgb(211,146,34)" fg:x="3506" fg:w="67"/><text x="20.8832%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (66 samples, 0.39%)</title><rect x="20.6391%" y="181" width="0.3884%" height="15" fill="rgb(228,22,38)" fg:x="3507" fg:w="66"/><text x="20.8891%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.12%)</title><rect x="20.9040%" y="165" width="0.1236%" height="15" fill="rgb(235,168,5)" fg:x="3552" fg:w="21"/><text x="21.1540%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="21.0099%" y="149" width="0.0177%" height="15" fill="rgb(221,155,16)" fg:x="3570" fg:w="3"/><text x="21.2599%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="21.0275%" y="213" width="0.0118%" height="15" fill="rgb(215,215,53)" fg:x="3573" fg:w="2"/><text x="21.2775%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.06%)</title><rect x="21.0982%" y="197" width="0.0647%" height="15" fill="rgb(223,4,10)" fg:x="3585" fg:w="11"/><text x="21.3482%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.06%)</title><rect x="21.0982%" y="181" width="0.0647%" height="15" fill="rgb(234,103,6)" fg:x="3585" fg:w="11"/><text x="21.3482%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.14%)</title><rect x="21.0393%" y="213" width="0.1412%" height="15" fill="rgb(227,97,0)" fg:x="3575" fg:w="24"/><text x="21.2893%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.02%)</title><rect x="21.1629%" y="197" width="0.0177%" height="15" fill="rgb(234,150,53)" fg:x="3596" fg:w="3"/><text x="21.4129%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.06%)</title><rect x="21.4630%" y="181" width="0.0589%" height="15" fill="rgb(228,201,54)" fg:x="3647" fg:w="10"/><text x="21.7130%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (69 samples, 0.41%)</title><rect x="21.1806%" y="213" width="0.4061%" height="15" fill="rgb(222,22,37)" fg:x="3599" fg:w="69"/><text x="21.4306%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (48 samples, 0.28%)</title><rect x="21.3041%" y="197" width="0.2825%" height="15" fill="rgb(237,53,32)" fg:x="3620" fg:w="48"/><text x="21.5541%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.06%)</title><rect x="21.5219%" y="181" width="0.0647%" height="15" fill="rgb(233,25,53)" fg:x="3657" fg:w="11"/><text x="21.7719%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,075 samples, 18.10%)</title><rect x="3.5075%" y="229" width="18.0968%" height="15" fill="rgb(210,40,34)" fg:x="596" fg:w="3075"/><text x="3.7575%" y="239.50">bench-913d788d6c26c7be`&lt;allo..</text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.04%)</title><rect x="21.6043%" y="229" width="0.0412%" height="15" fill="rgb(241,220,44)" fg:x="3671" fg:w="7"/><text x="21.8543%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="21.6455%" y="229" width="0.0118%" height="15" fill="rgb(235,28,35)" fg:x="3678" fg:w="2"/><text x="21.8955%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (40 samples, 0.24%)</title><rect x="22.2163%" y="197" width="0.2354%" height="15" fill="rgb(210,56,17)" fg:x="3775" fg:w="40"/><text x="22.4663%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (37 samples, 0.22%)</title><rect x="22.2340%" y="181" width="0.2177%" height="15" fill="rgb(224,130,29)" fg:x="3778" fg:w="37"/><text x="22.4840%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (67 samples, 0.39%)</title><rect x="22.0751%" y="213" width="0.3943%" height="15" fill="rgb(235,212,8)" fg:x="3751" fg:w="67"/><text x="22.3251%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.02%)</title><rect x="22.4517%" y="197" width="0.0177%" height="15" fill="rgb(223,33,50)" fg:x="3815" fg:w="3"/><text x="22.7017%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="23.0815%" y="197" width="0.0118%" height="15" fill="rgb(219,149,13)" fg:x="3922" fg:w="2"/><text x="23.3315%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (56 samples, 0.33%)</title><rect x="23.7288%" y="181" width="0.3296%" height="15" fill="rgb(250,156,29)" fg:x="4032" fg:w="56"/><text x="23.9788%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (303 samples, 1.78%)</title><rect x="22.4694%" y="213" width="1.7832%" height="15" fill="rgb(216,193,19)" fg:x="3818" fg:w="303"/><text x="22.7194%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (197 samples, 1.16%)</title><rect x="23.0932%" y="197" width="1.1594%" height="15" fill="rgb(216,135,14)" fg:x="3924" fg:w="197"/><text x="23.3432%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (33 samples, 0.19%)</title><rect x="24.0584%" y="181" width="0.1942%" height="15" fill="rgb(241,47,5)" fg:x="4088" fg:w="33"/><text x="24.3084%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="24.2526%" y="213" width="0.0177%" height="15" fill="rgb(233,42,35)" fg:x="4121" fg:w="3"/><text x="24.5026%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (446 samples, 2.62%)</title><rect x="21.6573%" y="229" width="2.6248%" height="15" fill="rgb(231,13,6)" fg:x="3680" fg:w="446"/><text x="21.9073%" y="239.50">be..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="24.2702%" y="213" width="0.0118%" height="15" fill="rgb(207,181,40)" fg:x="4124" fg:w="2"/><text x="24.5202%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_dealloc (2 samples, 0.01%)</title><rect x="24.2820%" y="229" width="0.0118%" height="15" fill="rgb(254,173,49)" fg:x="4126" fg:w="2"/><text x="24.5320%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`__rust_dealloc (2 samples, 0.01%)</title><rect x="24.2938%" y="229" width="0.0118%" height="15" fill="rgb(221,1,38)" fg:x="4128" fg:w="2"/><text x="24.5438%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_realloc (11 samples, 0.06%)</title><rect x="24.6057%" y="197" width="0.0647%" height="15" fill="rgb(206,124,46)" fg:x="4181" fg:w="11"/><text x="24.8557%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.04%)</title><rect x="24.9000%" y="149" width="0.0353%" height="15" fill="rgb(249,21,11)" fg:x="4231" fg:w="6"/><text x="25.1500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (50 samples, 0.29%)</title><rect x="24.6704%" y="197" width="0.2943%" height="15" fill="rgb(222,201,40)" fg:x="4192" fg:w="50"/><text x="24.9204%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (46 samples, 0.27%)</title><rect x="24.6940%" y="181" width="0.2707%" height="15" fill="rgb(235,61,29)" fg:x="4196" fg:w="46"/><text x="24.9440%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (44 samples, 0.26%)</title><rect x="24.7057%" y="165" width="0.2589%" height="15" fill="rgb(219,207,3)" fg:x="4198" fg:w="44"/><text x="24.9557%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.03%)</title><rect x="24.9353%" y="149" width="0.0294%" height="15" fill="rgb(222,56,46)" fg:x="4237" fg:w="5"/><text x="25.1853%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="24.9647%" y="197" width="0.0177%" height="15" fill="rgb(239,76,54)" fg:x="4242" fg:w="3"/><text x="25.2147%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.01%)</title><rect x="24.9823%" y="197" width="0.0118%" height="15" fill="rgb(231,124,27)" fg:x="4245" fg:w="2"/><text x="25.2323%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.01%)</title><rect x="25.0765%" y="181" width="0.0118%" height="15" fill="rgb(249,195,6)" fg:x="4261" fg:w="2"/><text x="25.3265%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (9 samples, 0.05%)</title><rect x="25.2060%" y="165" width="0.0530%" height="15" fill="rgb(237,174,47)" fg:x="4283" fg:w="9"/><text x="25.4560%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (5 samples, 0.03%)</title><rect x="25.2589%" y="165" width="0.0294%" height="15" fill="rgb(206,201,31)" fg:x="4292" fg:w="5"/><text x="25.5089%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.07%)</title><rect x="25.4532%" y="149" width="0.0706%" height="15" fill="rgb(231,57,52)" fg:x="4325" fg:w="12"/><text x="25.7032%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.04%)</title><rect x="26.0005%" y="117" width="0.0353%" height="15" fill="rgb(248,177,22)" fg:x="4418" fg:w="6"/><text x="26.2505%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (94 samples, 0.55%)</title><rect x="25.5238%" y="149" width="0.5532%" height="15" fill="rgb(215,211,37)" fg:x="4337" fg:w="94"/><text x="25.7738%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (49 samples, 0.29%)</title><rect x="25.7886%" y="133" width="0.2884%" height="15" fill="rgb(241,128,51)" fg:x="4382" fg:w="49"/><text x="26.0386%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.04%)</title><rect x="26.0358%" y="117" width="0.0412%" height="15" fill="rgb(227,165,31)" fg:x="4424" fg:w="7"/><text x="26.2858%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.06%)</title><rect x="26.0829%" y="149" width="0.0589%" height="15" fill="rgb(228,167,24)" fg:x="4432" fg:w="10"/><text x="26.3329%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="26.2418%" y="133" width="0.0118%" height="15" fill="rgb(228,143,12)" fg:x="4459" fg:w="2"/><text x="26.4918%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (21 samples, 0.12%)</title><rect x="26.1476%" y="149" width="0.1236%" height="15" fill="rgb(249,149,8)" fg:x="4443" fg:w="21"/><text x="26.3976%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="26.2535%" y="133" width="0.0177%" height="15" fill="rgb(243,35,44)" fg:x="4461" fg:w="3"/><text x="26.5035%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="26.6008%" y="101" width="0.0118%" height="15" fill="rgb(246,89,9)" fg:x="4520" fg:w="2"/><text x="26.8508%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (61 samples, 0.36%)</title><rect x="26.3006%" y="133" width="0.3590%" height="15" fill="rgb(233,213,13)" fg:x="4469" fg:w="61"/><text x="26.5506%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (18 samples, 0.11%)</title><rect x="26.5537%" y="117" width="0.1059%" height="15" fill="rgb(233,141,41)" fg:x="4512" fg:w="18"/><text x="26.8037%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (8 samples, 0.05%)</title><rect x="26.6125%" y="101" width="0.0471%" height="15" fill="rgb(239,167,4)" fg:x="4522" fg:w="8"/><text x="26.8625%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.09%)</title><rect x="26.9539%" y="117" width="0.0942%" height="15" fill="rgb(209,217,16)" fg:x="4580" fg:w="16"/><text x="27.2039%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (157 samples, 0.92%)</title><rect x="26.2712%" y="149" width="0.9240%" height="15" fill="rgb(219,88,35)" fg:x="4464" fg:w="157"/><text x="26.5212%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (91 samples, 0.54%)</title><rect x="26.6596%" y="133" width="0.5355%" height="15" fill="rgb(220,193,23)" fg:x="4530" fg:w="91"/><text x="26.9096%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (25 samples, 0.15%)</title><rect x="27.0480%" y="117" width="0.1471%" height="15" fill="rgb(230,90,52)" fg:x="4596" fg:w="25"/><text x="27.2980%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.03%)</title><rect x="27.1657%" y="101" width="0.0294%" height="15" fill="rgb(252,106,19)" fg:x="4616" fg:w="5"/><text x="27.4157%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (30 samples, 0.18%)</title><rect x="27.1952%" y="149" width="0.1766%" height="15" fill="rgb(206,74,20)" fg:x="4621" fg:w="30"/><text x="27.4452%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.13%)</title><rect x="27.2422%" y="133" width="0.1295%" height="15" fill="rgb(230,138,44)" fg:x="4629" fg:w="22"/><text x="27.4922%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.06%)</title><rect x="27.6306%" y="133" width="0.0647%" height="15" fill="rgb(235,182,43)" fg:x="4695" fg:w="11"/><text x="27.8806%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (64 samples, 0.38%)</title><rect x="27.3776%" y="149" width="0.3766%" height="15" fill="rgb(242,16,51)" fg:x="4652" fg:w="64"/><text x="27.6276%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.06%)</title><rect x="27.6954%" y="133" width="0.0589%" height="15" fill="rgb(248,9,4)" fg:x="4706" fg:w="10"/><text x="27.9454%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (438 samples, 2.58%)</title><rect x="25.2943%" y="165" width="2.5777%" height="15" fill="rgb(210,31,22)" fg:x="4298" fg:w="438"/><text x="25.5443%" y="175.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (20 samples, 0.12%)</title><rect x="27.7542%" y="149" width="0.1177%" height="15" fill="rgb(239,54,39)" fg:x="4716" fg:w="20"/><text x="28.0042%" y="159.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.01%)</title><rect x="27.8778%" y="165" width="0.0118%" height="15" fill="rgb(230,99,41)" fg:x="4737" fg:w="2"/><text x="28.1278%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (480 samples, 2.82%)</title><rect x="25.0883%" y="181" width="2.8249%" height="15" fill="rgb(253,106,12)" fg:x="4263" fg:w="480"/><text x="25.3383%" y="191.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="27.8896%" y="165" width="0.0235%" height="15" fill="rgb(213,46,41)" fg:x="4739" fg:w="4"/><text x="28.1396%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (6 samples, 0.04%)</title><rect x="27.9131%" y="181" width="0.0353%" height="15" fill="rgb(215,133,35)" fg:x="4743" fg:w="6"/><text x="28.1631%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.01%)</title><rect x="27.9484%" y="181" width="0.0118%" height="15" fill="rgb(213,28,5)" fg:x="4749" fg:w="2"/><text x="28.1984%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (31 samples, 0.18%)</title><rect x="27.9602%" y="181" width="0.1824%" height="15" fill="rgb(215,77,49)" fg:x="4751" fg:w="31"/><text x="28.2102%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (25 samples, 0.15%)</title><rect x="27.9955%" y="165" width="0.1471%" height="15" fill="rgb(248,100,22)" fg:x="4757" fg:w="25"/><text x="28.2455%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (542 samples, 3.19%)</title><rect x="24.9941%" y="197" width="3.1897%" height="15" fill="rgb(208,67,9)" fg:x="4247" fg:w="542"/><text x="25.2441%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.04%)</title><rect x="28.1427%" y="181" width="0.0412%" height="15" fill="rgb(219,133,21)" fg:x="4782" fg:w="7"/><text x="28.3927%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="28.1839%" y="197" width="0.0118%" height="15" fill="rgb(246,46,29)" fg:x="4789" fg:w="2"/><text x="28.4339%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (631 samples, 3.71%)</title><rect x="24.4880%" y="213" width="3.7135%" height="15" fill="rgb(246,185,52)" fg:x="4161" fg:w="631"/><text x="24.7380%" y="223.50">benc..</text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (664 samples, 3.91%)</title><rect x="24.3056%" y="229" width="3.9077%" height="15" fill="rgb(252,136,11)" fg:x="4130" fg:w="664"/><text x="24.5556%" y="239.50">benc..</text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (82 samples, 0.48%)</title><rect x="28.2192%" y="229" width="0.4826%" height="15" fill="rgb(219,138,53)" fg:x="4795" fg:w="82"/><text x="28.4692%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::bindings::Binding::add (13 samples, 0.08%)</title><rect x="28.7017%" y="229" width="0.0765%" height="15" fill="rgb(211,51,23)" fg:x="4877" fg:w="13"/><text x="28.9517%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.01%)</title><rect x="29.4962%" y="165" width="0.0118%" height="15" fill="rgb(247,221,28)" fg:x="5012" fg:w="2"/><text x="29.7462%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (31 samples, 0.18%)</title><rect x="30.6674%" y="149" width="0.1824%" height="15" fill="rgb(251,222,45)" fg:x="5211" fg:w="31"/><text x="30.9174%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="30.8498%" y="149" width="0.0177%" height="15" fill="rgb(217,162,53)" fg:x="5242" fg:w="3"/><text x="31.0998%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (398 samples, 2.34%)</title><rect x="29.2961%" y="197" width="2.3423%" height="15" fill="rgb(229,93,14)" fg:x="4978" fg:w="398"/><text x="29.5461%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (372 samples, 2.19%)</title><rect x="29.4492%" y="181" width="2.1893%" height="15" fill="rgb(209,67,49)" fg:x="5004" fg:w="372"/><text x="29.6992%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (362 samples, 2.13%)</title><rect x="29.5080%" y="165" width="2.1304%" height="15" fill="rgb(213,87,29)" fg:x="5014" fg:w="362"/><text x="29.7580%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (131 samples, 0.77%)</title><rect x="30.8675%" y="149" width="0.7710%" height="15" fill="rgb(205,151,52)" fg:x="5245" fg:w="131"/><text x="31.1175%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (56 samples, 0.33%)</title><rect x="31.3089%" y="133" width="0.3296%" height="15" fill="rgb(253,215,39)" fg:x="5320" fg:w="56"/><text x="31.5589%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.06%)</title><rect x="31.6384%" y="197" width="0.0647%" height="15" fill="rgb(221,220,41)" fg:x="5376" fg:w="11"/><text x="31.8884%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (2 samples, 0.01%)</title><rect x="31.7032%" y="197" width="0.0118%" height="15" fill="rgb(218,133,21)" fg:x="5387" fg:w="2"/><text x="31.9532%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="31.7149%" y="197" width="0.0118%" height="15" fill="rgb(221,193,43)" fg:x="5389" fg:w="2"/><text x="31.9649%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (523 samples, 3.08%)</title><rect x="29.0666%" y="213" width="3.0779%" height="15" fill="rgb(240,128,52)" fg:x="4939" fg:w="523"/><text x="29.3166%" y="223.50">ben..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (71 samples, 0.42%)</title><rect x="31.7267%" y="197" width="0.4178%" height="15" fill="rgb(253,114,12)" fg:x="5391" fg:w="71"/><text x="31.9767%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="32.1445%" y="213" width="0.0177%" height="15" fill="rgb(215,223,47)" fg:x="5462" fg:w="3"/><text x="32.3945%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_alloc (6 samples, 0.04%)</title><rect x="32.1622%" y="213" width="0.0353%" height="15" fill="rgb(248,225,23)" fg:x="5465" fg:w="6"/><text x="32.4122%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::bindings::Binding::join (588 samples, 3.46%)</title><rect x="28.7782%" y="229" width="3.4605%" height="15" fill="rgb(250,108,0)" fg:x="4890" fg:w="588"/><text x="29.0282%" y="239.50">ben..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="32.2152%" y="213" width="0.0235%" height="15" fill="rgb(228,208,7)" fg:x="5474" fg:w="4"/><text x="32.4652%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.05%)</title><rect x="34.4986%" y="213" width="0.0471%" height="15" fill="rgb(244,45,10)" fg:x="5862" fg:w="8"/><text x="34.7486%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.13%)</title><rect x="34.5457%" y="213" width="0.1295%" height="15" fill="rgb(207,125,25)" fg:x="5870" fg:w="22"/><text x="34.7957%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_alloc (2 samples, 0.01%)</title><rect x="34.8046%" y="197" width="0.0118%" height="15" fill="rgb(210,195,18)" fg:x="5914" fg:w="2"/><text x="35.0546%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_realloc (2 samples, 0.01%)</title><rect x="34.8164%" y="197" width="0.0118%" height="15" fill="rgb(249,80,12)" fg:x="5916" fg:w="2"/><text x="35.0664%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_realloc (13 samples, 0.08%)</title><rect x="34.8929%" y="181" width="0.0765%" height="15" fill="rgb(221,65,9)" fg:x="5929" fg:w="13"/><text x="35.1429%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (18 samples, 0.11%)</title><rect x="35.4637%" y="133" width="0.1059%" height="15" fill="rgb(235,49,36)" fg:x="6026" fg:w="18"/><text x="35.7137%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (142 samples, 0.84%)</title><rect x="34.9988%" y="165" width="0.8357%" height="15" fill="rgb(225,32,20)" fg:x="5947" fg:w="142"/><text x="35.2488%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (135 samples, 0.79%)</title><rect x="35.0400%" y="149" width="0.7945%" height="15" fill="rgb(215,141,46)" fg:x="5954" fg:w="135"/><text x="35.2900%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (44 samples, 0.26%)</title><rect x="35.5756%" y="133" width="0.2589%" height="15" fill="rgb(250,160,47)" fg:x="6045" fg:w="44"/><text x="35.8256%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.08%)</title><rect x="35.7521%" y="117" width="0.0824%" height="15" fill="rgb(216,222,40)" fg:x="6075" fg:w="14"/><text x="36.0021%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (151 samples, 0.89%)</title><rect x="34.9694%" y="181" width="0.8887%" height="15" fill="rgb(234,217,39)" fg:x="5942" fg:w="151"/><text x="35.2194%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="35.8345%" y="165" width="0.0235%" height="15" fill="rgb(207,178,40)" fg:x="6089" fg:w="4"/><text x="36.0845%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.01%)</title><rect x="35.9640%" y="165" width="0.0118%" height="15" fill="rgb(221,136,13)" fg:x="6111" fg:w="2"/><text x="36.2140%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (11 samples, 0.06%)</title><rect x="36.0640%" y="149" width="0.0647%" height="15" fill="rgb(249,199,10)" fg:x="6128" fg:w="11"/><text x="36.3140%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (2 samples, 0.01%)</title><rect x="36.1288%" y="149" width="0.0118%" height="15" fill="rgb(249,222,13)" fg:x="6139" fg:w="2"/><text x="36.3788%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="36.1405%" y="149" width="0.0177%" height="15" fill="rgb(244,185,38)" fg:x="6141" fg:w="3"/><text x="36.3905%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.02%)</title><rect x="36.3053%" y="133" width="0.0235%" height="15" fill="rgb(236,202,9)" fg:x="6169" fg:w="4"/><text x="36.5553%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (28 samples, 0.16%)</title><rect x="37.0468%" y="101" width="0.1648%" height="15" fill="rgb(250,229,37)" fg:x="6295" fg:w="28"/><text x="37.2968%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (164 samples, 0.97%)</title><rect x="36.3289%" y="133" width="0.9652%" height="15" fill="rgb(206,174,23)" fg:x="6173" fg:w="164"/><text x="36.5789%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (101 samples, 0.59%)</title><rect x="36.6996%" y="117" width="0.5944%" height="15" fill="rgb(211,33,43)" fg:x="6236" fg:w="101"/><text x="36.9496%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (14 samples, 0.08%)</title><rect x="37.2116%" y="101" width="0.0824%" height="15" fill="rgb(245,58,50)" fg:x="6323" fg:w="14"/><text x="37.4616%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (17 samples, 0.10%)</title><rect x="37.2940%" y="133" width="0.1000%" height="15" fill="rgb(244,68,36)" fg:x="6337" fg:w="17"/><text x="37.5440%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (2 samples, 0.01%)</title><rect x="37.3941%" y="133" width="0.0118%" height="15" fill="rgb(232,229,15)" fg:x="6354" fg:w="2"/><text x="37.6441%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.02%)</title><rect x="37.6707%" y="85" width="0.0177%" height="15" fill="rgb(254,30,23)" fg:x="6401" fg:w="3"/><text x="37.9207%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (49 samples, 0.29%)</title><rect x="37.4411%" y="117" width="0.2884%" height="15" fill="rgb(235,160,14)" fg:x="6362" fg:w="49"/><text x="37.6911%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (14 samples, 0.08%)</title><rect x="37.6471%" y="101" width="0.0824%" height="15" fill="rgb(212,155,44)" fg:x="6397" fg:w="14"/><text x="37.8971%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.04%)</title><rect x="37.6883%" y="85" width="0.0412%" height="15" fill="rgb(226,2,50)" fg:x="6404" fg:w="7"/><text x="37.9383%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (13 samples, 0.08%)</title><rect x="38.0767%" y="101" width="0.0765%" height="15" fill="rgb(234,177,6)" fg:x="6470" fg:w="13"/><text x="38.3267%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (179 samples, 1.05%)</title><rect x="37.4058%" y="133" width="1.0534%" height="15" fill="rgb(217,24,9)" fg:x="6356" fg:w="179"/><text x="37.6558%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (124 samples, 0.73%)</title><rect x="37.7295%" y="117" width="0.7298%" height="15" fill="rgb(220,13,46)" fg:x="6411" fg:w="124"/><text x="37.9795%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (52 samples, 0.31%)</title><rect x="38.1532%" y="101" width="0.3060%" height="15" fill="rgb(239,221,27)" fg:x="6483" fg:w="52"/><text x="38.4032%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.08%)</title><rect x="38.3828%" y="85" width="0.0765%" height="15" fill="rgb(222,198,25)" fg:x="6522" fg:w="13"/><text x="38.6328%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (51 samples, 0.30%)</title><rect x="38.4593%" y="133" width="0.3001%" height="15" fill="rgb(211,99,13)" fg:x="6535" fg:w="51"/><text x="38.7093%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (46 samples, 0.27%)</title><rect x="38.4887%" y="117" width="0.2707%" height="15" fill="rgb(232,111,31)" fg:x="6540" fg:w="46"/><text x="38.7387%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="38.7712%" y="133" width="0.0118%" height="15" fill="rgb(245,82,37)" fg:x="6588" fg:w="2"/><text x="39.0212%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.09%)</title><rect x="39.2479%" y="117" width="0.0942%" height="15" fill="rgb(227,149,46)" fg:x="6669" fg:w="16"/><text x="39.4979%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (116 samples, 0.68%)</title><rect x="38.7830%" y="133" width="0.6827%" height="15" fill="rgb(218,36,50)" fg:x="6590" fg:w="116"/><text x="39.0330%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (21 samples, 0.12%)</title><rect x="39.3420%" y="117" width="0.1236%" height="15" fill="rgb(226,80,48)" fg:x="6685" fg:w="21"/><text x="39.5920%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (578 samples, 3.40%)</title><rect x="36.1582%" y="149" width="3.4016%" height="15" fill="rgb(238,224,15)" fg:x="6144" fg:w="578"/><text x="36.4082%" y="159.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (16 samples, 0.09%)</title><rect x="39.4656%" y="133" width="0.0942%" height="15" fill="rgb(241,136,10)" fg:x="6706" fg:w="16"/><text x="39.7156%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.01%)</title><rect x="39.5657%" y="149" width="0.0118%" height="15" fill="rgb(208,32,45)" fg:x="6723" fg:w="2"/><text x="39.8157%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (615 samples, 3.62%)</title><rect x="35.9758%" y="165" width="3.6194%" height="15" fill="rgb(207,135,9)" fg:x="6113" fg:w="615"/><text x="36.2258%" y="175.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="39.5774%" y="149" width="0.0177%" height="15" fill="rgb(206,86,44)" fg:x="6725" fg:w="3"/><text x="39.8274%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (50 samples, 0.29%)</title><rect x="39.6069%" y="165" width="0.2943%" height="15" fill="rgb(245,177,15)" fg:x="6730" fg:w="50"/><text x="39.8569%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (43 samples, 0.25%)</title><rect x="39.6481%" y="149" width="0.2531%" height="15" fill="rgb(206,64,50)" fg:x="6737" fg:w="43"/><text x="39.8981%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (687 samples, 4.04%)</title><rect x="35.8639%" y="181" width="4.0431%" height="15" fill="rgb(234,36,40)" fg:x="6094" fg:w="687"/><text x="36.1139%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="39.9070%" y="181" width="0.0118%" height="15" fill="rgb(213,64,8)" fg:x="6781" fg:w="2"/><text x="40.1570%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (867 samples, 5.10%)</title><rect x="34.8340%" y="197" width="5.1024%" height="15" fill="rgb(210,75,36)" fg:x="5919" fg:w="867"/><text x="35.0840%" y="207.50">bench-..</text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="39.9188%" y="181" width="0.0177%" height="15" fill="rgb(229,88,21)" fg:x="6783" fg:w="3"/><text x="40.1688%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="39.9364%" y="197" width="0.0118%" height="15" fill="rgb(252,204,47)" fg:x="6786" fg:w="2"/><text x="40.1864%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (897 samples, 5.28%)</title><rect x="34.6751%" y="213" width="5.2790%" height="15" fill="rgb(208,77,27)" fg:x="5892" fg:w="897"/><text x="34.9251%" y="223.50">bench-..</text></g><g><title>bench-913d788d6c26c7be`minimal::reasoner::Reasoner::substitute_head_with_bindings (1,794 samples, 10.56%)</title><rect x="32.2387%" y="229" width="10.5579%" height="15" fill="rgb(221,76,26)" fg:x="5478" fg:w="1794"/><text x="32.4887%" y="239.50">bench-913d788d6..</text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (482 samples, 2.84%)</title><rect x="39.9600%" y="213" width="2.8366%" height="15" fill="rgb(225,139,18)" fg:x="6790" fg:w="482"/><text x="40.2100%" y="223.50">be..</text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (196 samples, 1.15%)</title><rect x="41.6431%" y="197" width="1.1535%" height="15" fill="rgb(230,137,11)" fg:x="7076" fg:w="196"/><text x="41.8931%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.04%)</title><rect x="43.3204%" y="133" width="0.0412%" height="15" fill="rgb(212,28,1)" fg:x="7361" fg:w="7"/><text x="43.5704%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (68 samples, 0.40%)</title><rect x="43.0497%" y="181" width="0.4002%" height="15" fill="rgb(248,164,17)" fg:x="7315" fg:w="68"/><text x="43.2997%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (66 samples, 0.39%)</title><rect x="43.0614%" y="165" width="0.3884%" height="15" fill="rgb(222,171,42)" fg:x="7317" fg:w="66"/><text x="43.3114%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (61 samples, 0.36%)</title><rect x="43.0909%" y="149" width="0.3590%" height="15" fill="rgb(243,84,45)" fg:x="7322" fg:w="61"/><text x="43.3409%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.09%)</title><rect x="43.3616%" y="133" width="0.0883%" height="15" fill="rgb(252,49,23)" fg:x="7368" fg:w="15"/><text x="43.6116%" y="143.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (72 samples, 0.42%)</title><rect x="43.0320%" y="197" width="0.4237%" height="15" fill="rgb(215,19,7)" fg:x="7312" fg:w="72"/><text x="43.2820%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="43.4557%" y="197" width="0.0177%" height="15" fill="rgb(238,81,41)" fg:x="7384" fg:w="3"/><text x="43.7057%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (78 samples, 0.46%)</title><rect x="43.0202%" y="213" width="0.4590%" height="15" fill="rgb(210,199,37)" fg:x="7310" fg:w="78"/><text x="43.2702%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::ruleindex::RuleIndex::find_match (127 samples, 0.75%)</title><rect x="42.7966%" y="229" width="0.7474%" height="15" fill="rgb(244,192,49)" fg:x="7272" fg:w="127"/><text x="43.0466%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (11 samples, 0.06%)</title><rect x="43.4793%" y="213" width="0.0647%" height="15" fill="rgb(226,211,11)" fg:x="7388" fg:w="11"/><text x="43.7293%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.03%)</title><rect x="43.5146%" y="197" width="0.0294%" height="15" fill="rgb(236,162,54)" fg:x="7394" fg:w="5"/><text x="43.7646%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.04%)</title><rect x="44.4974%" y="213" width="0.0353%" height="15" fill="rgb(220,229,9)" fg:x="7561" fg:w="6"/><text x="44.7474%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.05%)</title><rect x="44.9094%" y="133" width="0.0530%" height="15" fill="rgb(250,87,22)" fg:x="7631" fg:w="9"/><text x="45.1594%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (89 samples, 0.52%)</title><rect x="44.6269%" y="181" width="0.5238%" height="15" fill="rgb(239,43,17)" fg:x="7583" fg:w="89"/><text x="44.8769%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (83 samples, 0.49%)</title><rect x="44.6622%" y="165" width="0.4885%" height="15" fill="rgb(231,177,25)" fg:x="7589" fg:w="83"/><text x="44.9122%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (81 samples, 0.48%)</title><rect x="44.6740%" y="149" width="0.4767%" height="15" fill="rgb(219,179,1)" fg:x="7591" fg:w="81"/><text x="44.9240%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (32 samples, 0.19%)</title><rect x="44.9623%" y="133" width="0.1883%" height="15" fill="rgb(238,219,53)" fg:x="7640" fg:w="32"/><text x="45.2123%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.06%)</title><rect x="45.0859%" y="117" width="0.0647%" height="15" fill="rgb(232,167,36)" fg:x="7661" fg:w="11"/><text x="45.3359%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="45.2154%" y="101" width="0.0118%" height="15" fill="rgb(244,19,51)" fg:x="7683" fg:w="2"/><text x="45.4654%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.04%)</title><rect x="45.1977%" y="133" width="0.0353%" height="15" fill="rgb(224,6,22)" fg:x="7680" fg:w="6"/><text x="45.4477%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.02%)</title><rect x="45.2154%" y="117" width="0.0177%" height="15" fill="rgb(224,145,5)" fg:x="7683" fg:w="3"/><text x="45.4654%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.04%)</title><rect x="45.2448%" y="133" width="0.0412%" height="15" fill="rgb(234,130,49)" fg:x="7688" fg:w="7"/><text x="45.4948%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.04%)</title><rect x="45.2507%" y="117" width="0.0353%" height="15" fill="rgb(254,6,2)" fg:x="7689" fg:w="6"/><text x="45.5007%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.02%)</title><rect x="45.2684%" y="101" width="0.0177%" height="15" fill="rgb(208,96,46)" fg:x="7692" fg:w="3"/><text x="45.5184%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (32 samples, 0.19%)</title><rect x="45.1742%" y="149" width="0.1883%" height="15" fill="rgb(239,3,39)" fg:x="7676" fg:w="32"/><text x="45.4242%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 0.07%)</title><rect x="45.2919%" y="133" width="0.0706%" height="15" fill="rgb(233,210,1)" fg:x="7696" fg:w="12"/><text x="45.5419%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (33 samples, 0.19%)</title><rect x="45.1742%" y="165" width="0.1942%" height="15" fill="rgb(244,137,37)" fg:x="7676" fg:w="33"/><text x="45.4242%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="45.3684%" y="165" width="0.0235%" height="15" fill="rgb(240,136,2)" fg:x="7709" fg:w="4"/><text x="45.6184%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="45.3802%" y="149" width="0.0118%" height="15" fill="rgb(239,18,37)" fg:x="7711" fg:w="2"/><text x="45.6302%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (41 samples, 0.24%)</title><rect x="45.1565%" y="181" width="0.2413%" height="15" fill="rgb(218,185,22)" fg:x="7673" fg:w="41"/><text x="45.4065%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (149 samples, 0.88%)</title><rect x="44.5327%" y="213" width="0.8769%" height="15" fill="rgb(225,218,4)" fg:x="7567" fg:w="149"/><text x="44.7827%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (141 samples, 0.83%)</title><rect x="44.5798%" y="197" width="0.8298%" height="15" fill="rgb(230,182,32)" fg:x="7575" fg:w="141"/><text x="44.8298%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="45.3978%" y="181" width="0.0118%" height="15" fill="rgb(242,56,43)" fg:x="7714" fg:w="2"/><text x="45.6478%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (220 samples, 1.29%)</title><rect x="45.4155%" y="213" width="1.2947%" height="15" fill="rgb(233,99,24)" fg:x="7717" fg:w="220"/><text x="45.6655%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (76 samples, 0.45%)</title><rect x="46.2629%" y="197" width="0.4473%" height="15" fill="rgb(234,209,42)" fg:x="7861" fg:w="76"/><text x="46.5129%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (6 samples, 0.04%)</title><rect x="46.7750%" y="197" width="0.0353%" height="15" fill="rgb(227,7,12)" fg:x="7948" fg:w="6"/><text x="47.0250%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="46.7926%" y="181" width="0.0177%" height="15" fill="rgb(245,203,43)" fg:x="7951" fg:w="3"/><text x="47.0426%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="47.0280%" y="165" width="0.0118%" height="15" fill="rgb(238,205,33)" fg:x="7991" fg:w="2"/><text x="47.2780%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (15 samples, 0.09%)</title><rect x="47.0398%" y="165" width="0.0883%" height="15" fill="rgb(231,56,7)" fg:x="7993" fg:w="15"/><text x="47.2898%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.04%)</title><rect x="47.0869%" y="149" width="0.0412%" height="15" fill="rgb(244,186,29)" fg:x="8001" fg:w="7"/><text x="47.3369%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.04%)</title><rect x="47.1281%" y="133" width="0.0353%" height="15" fill="rgb(234,111,31)" fg:x="8008" fg:w="6"/><text x="47.3781%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.02%)</title><rect x="47.1398%" y="117" width="0.0235%" height="15" fill="rgb(241,149,10)" fg:x="8010" fg:w="4"/><text x="47.3898%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.08%)</title><rect x="47.1281%" y="165" width="0.0824%" height="15" fill="rgb(249,206,44)" fg:x="8008" fg:w="14"/><text x="47.3781%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.08%)</title><rect x="47.1281%" y="149" width="0.0824%" height="15" fill="rgb(251,153,30)" fg:x="8008" fg:w="14"/><text x="47.3781%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.05%)</title><rect x="47.1634%" y="133" width="0.0471%" height="15" fill="rgb(239,152,38)" fg:x="8014" fg:w="8"/><text x="47.4134%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.02%)</title><rect x="47.1928%" y="117" width="0.0177%" height="15" fill="rgb(249,139,47)" fg:x="8019" fg:w="3"/><text x="47.4428%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.01%)</title><rect x="47.2105%" y="149" width="0.0118%" height="15" fill="rgb(244,64,35)" fg:x="8022" fg:w="2"/><text x="47.4605%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="47.2105%" y="165" width="0.0177%" height="15" fill="rgb(216,46,15)" fg:x="8022" fg:w="3"/><text x="47.4605%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.02%)</title><rect x="47.2340%" y="165" width="0.0235%" height="15" fill="rgb(250,74,19)" fg:x="8026" fg:w="4"/><text x="47.4840%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="47.2458%" y="149" width="0.0118%" height="15" fill="rgb(249,42,33)" fg:x="8028" fg:w="2"/><text x="47.4958%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::tripleindex::TripleIndex::add (634 samples, 3.73%)</title><rect x="43.5440%" y="229" width="3.7312%" height="15" fill="rgb(242,149,17)" fg:x="7399" fg:w="634"/><text x="43.7940%" y="239.50">benc..</text></g><g><title>bench-913d788d6c26c7be`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (96 samples, 0.56%)</title><rect x="46.7102%" y="213" width="0.5650%" height="15" fill="rgb(244,29,21)" fg:x="7937" fg:w="96"/><text x="46.9602%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::insert (79 samples, 0.46%)</title><rect x="46.8103%" y="197" width="0.4649%" height="15" fill="rgb(220,130,37)" fg:x="7954" fg:w="79"/><text x="47.0603%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (67 samples, 0.39%)</title><rect x="46.8809%" y="181" width="0.3943%" height="15" fill="rgb(211,67,2)" fg:x="7966" fg:w="67"/><text x="47.1309%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="47.2634%" y="165" width="0.0118%" height="15" fill="rgb(235,68,52)" fg:x="8031" fg:w="2"/><text x="47.5134%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (69 samples, 0.41%)</title><rect x="59.8576%" y="213" width="0.4061%" height="15" fill="rgb(246,142,3)" fg:x="10171" fg:w="69"/><text x="60.1076%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::tripleindex::TripleIndex::contains (4,669 samples, 27.48%)</title><rect x="47.2752%" y="229" width="27.4776%" height="15" fill="rgb(241,25,7)" fg:x="8033" fg:w="4669"/><text x="47.5252%" y="239.50">bench-913d788d6c26c7be`minimal::tripleindex:..</text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (2,462 samples, 14.49%)</title><rect x="60.2637%" y="213" width="14.4892%" height="15" fill="rgb(242,119,39)" fg:x="10240" fg:w="2462"/><text x="60.5137%" y="223.50">bench-913d788d6c26c7be..</text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (947 samples, 5.57%)</title><rect x="69.1796%" y="197" width="5.5732%" height="15" fill="rgb(241,98,45)" fg:x="11755" fg:w="947"/><text x="69.4296%" y="207.50">bench-9..</text></g><g><title>bench-913d788d6c26c7be`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="76.6537%" y="213" width="0.0235%" height="15" fill="rgb(254,28,30)" fg:x="13025" fg:w="4"/><text x="76.9037%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="76.6773%" y="213" width="0.0118%" height="15" fill="rgb(241,142,54)" fg:x="13029" fg:w="2"/><text x="76.9273%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.06%)</title><rect x="76.6890%" y="213" width="0.0647%" height="15" fill="rgb(222,85,15)" fg:x="13031" fg:w="11"/><text x="76.9390%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (90 samples, 0.53%)</title><rect x="76.7538%" y="213" width="0.5297%" height="15" fill="rgb(210,85,47)" fg:x="13042" fg:w="90"/><text x="77.0038%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (34 samples, 0.20%)</title><rect x="77.0833%" y="197" width="0.2001%" height="15" fill="rgb(224,206,25)" fg:x="13098" fg:w="34"/><text x="77.3333%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (52 samples, 0.31%)</title><rect x="80.6085%" y="197" width="0.3060%" height="15" fill="rgb(243,201,19)" fg:x="13697" fg:w="52"/><text x="80.8585%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_alloc (3 samples, 0.02%)</title><rect x="81.1441%" y="181" width="0.0177%" height="15" fill="rgb(236,59,4)" fg:x="13788" fg:w="3"/><text x="81.3941%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_realloc (2 samples, 0.01%)</title><rect x="81.1617%" y="181" width="0.0118%" height="15" fill="rgb(254,179,45)" fg:x="13791" fg:w="2"/><text x="81.4117%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_realloc (3 samples, 0.02%)</title><rect x="81.2559%" y="165" width="0.0177%" height="15" fill="rgb(226,14,10)" fg:x="13807" fg:w="3"/><text x="81.5059%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.05%)</title><rect x="81.7738%" y="117" width="0.0530%" height="15" fill="rgb(244,27,41)" fg:x="13895" fg:w="9"/><text x="82.0238%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (101 samples, 0.59%)</title><rect x="81.2735%" y="165" width="0.5944%" height="15" fill="rgb(235,35,32)" fg:x="13810" fg:w="101"/><text x="81.5235%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (91 samples, 0.54%)</title><rect x="81.3324%" y="149" width="0.5355%" height="15" fill="rgb(218,68,31)" fg:x="13820" fg:w="91"/><text x="81.5824%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (86 samples, 0.51%)</title><rect x="81.3618%" y="133" width="0.5061%" height="15" fill="rgb(207,120,37)" fg:x="13825" fg:w="86"/><text x="81.6118%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.04%)</title><rect x="81.8267%" y="117" width="0.0412%" height="15" fill="rgb(227,98,0)" fg:x="13904" fg:w="7"/><text x="82.0767%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="81.8444%" y="101" width="0.0235%" height="15" fill="rgb(207,7,3)" fg:x="13907" fg:w="4"/><text x="82.0944%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.02%)</title><rect x="81.8738%" y="165" width="0.0177%" height="15" fill="rgb(206,98,19)" fg:x="13912" fg:w="3"/><text x="82.1238%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.02%)</title><rect x="81.9798%" y="149" width="0.0177%" height="15" fill="rgb(217,5,26)" fg:x="13930" fg:w="3"/><text x="82.2298%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (12 samples, 0.07%)</title><rect x="82.1269%" y="133" width="0.0706%" height="15" fill="rgb(235,190,38)" fg:x="13955" fg:w="12"/><text x="82.3769%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (3 samples, 0.02%)</title><rect x="82.1975%" y="133" width="0.0177%" height="15" fill="rgb(247,86,24)" fg:x="13967" fg:w="3"/><text x="82.4475%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="82.2152%" y="133" width="0.0235%" height="15" fill="rgb(205,101,16)" fg:x="13970" fg:w="4"/><text x="82.4652%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="82.7801%" y="101" width="0.0118%" height="15" fill="rgb(246,168,33)" fg:x="14066" fg:w="2"/><text x="83.0301%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.12%)</title><rect x="82.9920%" y="85" width="0.1177%" height="15" fill="rgb(231,114,1)" fg:x="14102" fg:w="20"/><text x="83.2420%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (135 samples, 0.79%)</title><rect x="82.3682%" y="117" width="0.7945%" height="15" fill="rgb(207,184,53)" fg:x="13996" fg:w="135"/><text x="82.6182%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (63 samples, 0.37%)</title><rect x="82.7919%" y="101" width="0.3708%" height="15" fill="rgb(224,95,51)" fg:x="14068" fg:w="63"/><text x="83.0419%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.05%)</title><rect x="83.1097%" y="85" width="0.0530%" height="15" fill="rgb(212,188,45)" fg:x="14122" fg:w="9"/><text x="83.3597%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.05%)</title><rect x="83.1627%" y="117" width="0.0471%" height="15" fill="rgb(223,154,38)" fg:x="14131" fg:w="8"/><text x="83.4127%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (17 samples, 0.10%)</title><rect x="83.8630%" y="85" width="0.1000%" height="15" fill="rgb(251,22,52)" fg:x="14250" fg:w="17"/><text x="84.1130%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (178 samples, 1.05%)</title><rect x="83.2097%" y="117" width="1.0476%" height="15" fill="rgb(229,209,22)" fg:x="14139" fg:w="178"/><text x="83.4597%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (171 samples, 1.01%)</title><rect x="83.2509%" y="101" width="1.0064%" height="15" fill="rgb(234,138,34)" fg:x="14146" fg:w="171"/><text x="83.5009%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (50 samples, 0.29%)</title><rect x="83.9630%" y="85" width="0.2943%" height="15" fill="rgb(212,95,11)" fg:x="14267" fg:w="50"/><text x="84.2130%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.09%)</title><rect x="84.1631%" y="69" width="0.0942%" height="15" fill="rgb(240,179,47)" fg:x="14301" fg:w="16"/><text x="84.4131%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (42 samples, 0.25%)</title><rect x="84.2573%" y="117" width="0.2472%" height="15" fill="rgb(240,163,11)" fg:x="14317" fg:w="42"/><text x="84.5073%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (35 samples, 0.21%)</title><rect x="84.2985%" y="101" width="0.2060%" height="15" fill="rgb(236,37,12)" fg:x="14324" fg:w="35"/><text x="84.5485%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.12%)</title><rect x="85.1636%" y="101" width="0.1177%" height="15" fill="rgb(232,164,16)" fg:x="14471" fg:w="20"/><text x="85.4136%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (147 samples, 0.87%)</title><rect x="84.5280%" y="117" width="0.8651%" height="15" fill="rgb(244,205,15)" fg:x="14363" fg:w="147"/><text x="84.7780%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (19 samples, 0.11%)</title><rect x="85.2813%" y="101" width="0.1118%" height="15" fill="rgb(223,117,47)" fg:x="14491" fg:w="19"/><text x="85.5313%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (577 samples, 3.40%)</title><rect x="82.2387%" y="133" width="3.3957%" height="15" fill="rgb(244,107,35)" fg:x="13974" fg:w="577"/><text x="82.4887%" y="143.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (41 samples, 0.24%)</title><rect x="85.3931%" y="117" width="0.2413%" height="15" fill="rgb(205,140,8)" fg:x="14510" fg:w="41"/><text x="85.6431%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.01%)</title><rect x="85.6344%" y="133" width="0.0118%" height="15" fill="rgb(228,84,46)" fg:x="14551" fg:w="2"/><text x="85.8844%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (627 samples, 3.69%)</title><rect x="81.9974%" y="149" width="3.6900%" height="15" fill="rgb(254,188,9)" fg:x="13933" fg:w="627"/><text x="82.2474%" y="159.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.04%)</title><rect x="85.6521%" y="133" width="0.0353%" height="15" fill="rgb(206,112,54)" fg:x="14554" fg:w="6"/><text x="85.9021%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (55 samples, 0.32%)</title><rect x="85.6933%" y="149" width="0.3237%" height="15" fill="rgb(216,84,49)" fg:x="14561" fg:w="55"/><text x="85.9433%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (50 samples, 0.29%)</title><rect x="85.7227%" y="133" width="0.2943%" height="15" fill="rgb(214,194,35)" fg:x="14566" fg:w="50"/><text x="85.9727%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (702 samples, 4.13%)</title><rect x="81.8915%" y="165" width="4.1314%" height="15" fill="rgb(249,28,3)" fg:x="13915" fg:w="702"/><text x="82.1415%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="86.0228%" y="165" width="0.0177%" height="15" fill="rgb(222,56,52)" fg:x="14617" fg:w="3"/><text x="86.2728%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (828 samples, 4.87%)</title><rect x="81.1794%" y="181" width="4.8729%" height="15" fill="rgb(245,217,50)" fg:x="13794" fg:w="828"/><text x="81.4294%" y="191.50">bench-..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="86.0405%" y="165" width="0.0118%" height="15" fill="rgb(213,201,24)" fg:x="14620" fg:w="2"/><text x="86.2905%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (875 samples, 5.15%)</title><rect x="80.9145%" y="197" width="5.1495%" height="15" fill="rgb(248,116,28)" fg:x="13749" fg:w="875"/><text x="81.1645%" y="207.50">bench-..</text></g><g><title>bench-913d788d6c26c7be`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="86.0640%" y="197" width="0.0177%" height="15" fill="rgb(219,72,43)" fg:x="14624" fg:w="3"/><text x="86.3140%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (922 samples, 5.43%)</title><rect x="86.0817%" y="197" width="5.4261%" height="15" fill="rgb(209,138,14)" fg:x="14627" fg:w="922"/><text x="86.3317%" y="207.50">bench-9..</text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (352 samples, 2.07%)</title><rect x="89.4362%" y="181" width="2.0716%" height="15" fill="rgb(222,18,33)" fg:x="15197" fg:w="352"/><text x="89.6862%" y="191.50">b..</text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (24 samples, 0.14%)</title><rect x="91.6078%" y="181" width="0.1412%" height="15" fill="rgb(213,199,7)" fg:x="15566" fg:w="24"/><text x="91.8578%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.05%)</title><rect x="91.6961%" y="165" width="0.0530%" height="15" fill="rgb(250,110,10)" fg:x="15581" fg:w="9"/><text x="91.9461%" y="175.50"></text></g><g><title>bench-913d788d6c26c7be`__rdl_alloc (2 samples, 0.01%)</title><rect x="91.9609%" y="165" width="0.0118%" height="15" fill="rgb(248,123,6)" fg:x="15626" fg:w="2"/><text x="92.2109%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (17 samples, 0.10%)</title><rect x="92.6318%" y="101" width="0.1000%" height="15" fill="rgb(206,91,31)" fg:x="15740" fg:w="17"/><text x="92.8818%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (136 samples, 0.80%)</title><rect x="92.1669%" y="133" width="0.8004%" height="15" fill="rgb(211,154,13)" fg:x="15661" fg:w="136"/><text x="92.4169%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (133 samples, 0.78%)</title><rect x="92.1846%" y="117" width="0.7827%" height="15" fill="rgb(225,148,7)" fg:x="15664" fg:w="133"/><text x="92.4346%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 0.24%)</title><rect x="92.7319%" y="101" width="0.2354%" height="15" fill="rgb(220,160,43)" fg:x="15757" fg:w="40"/><text x="92.9819%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.09%)</title><rect x="92.8731%" y="85" width="0.0942%" height="15" fill="rgb(213,52,39)" fg:x="15781" fg:w="16"/><text x="93.1231%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (143 samples, 0.84%)</title><rect x="92.1316%" y="149" width="0.8416%" height="15" fill="rgb(243,137,7)" fg:x="15655" fg:w="143"/><text x="92.3816%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="92.9790%" y="149" width="0.0118%" height="15" fill="rgb(230,79,13)" fg:x="15799" fg:w="2"/><text x="93.2290%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="92.9908%" y="149" width="0.0294%" height="15" fill="rgb(247,105,23)" fg:x="15801" fg:w="5"/><text x="93.2408%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (179 samples, 1.05%)</title><rect x="91.9786%" y="165" width="1.0534%" height="15" fill="rgb(223,179,41)" fg:x="15629" fg:w="179"/><text x="92.2286%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="93.0202%" y="149" width="0.0118%" height="15" fill="rgb(218,9,34)" fg:x="15806" fg:w="2"/><text x="93.2702%" y="159.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (262 samples, 1.54%)</title><rect x="91.5078%" y="197" width="1.5419%" height="15" fill="rgb(222,106,8)" fg:x="15549" fg:w="262"/><text x="91.7578%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`hashbrown::raw::RawTable&lt;T,A&gt;::insert (221 samples, 1.30%)</title><rect x="91.7491%" y="181" width="1.3006%" height="15" fill="rgb(211,220,0)" fg:x="15590" fg:w="221"/><text x="91.9991%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::bindings::Binding::add (2,679 samples, 15.77%)</title><rect x="77.2893%" y="213" width="15.7662%" height="15" fill="rgb(229,52,16)" fg:x="13133" fg:w="2679"/><text x="77.5393%" y="223.50">bench-913d788d6c26c7be`m..</text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="93.4969%" y="197" width="0.0118%" height="15" fill="rgb(212,155,18)" fg:x="15887" fg:w="2"/><text x="93.7469%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (149 samples, 0.88%)</title><rect x="93.0556%" y="213" width="0.8769%" height="15" fill="rgb(242,21,14)" fg:x="15812" fg:w="149"/><text x="93.3056%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`core::hash::BuildHasher::hash_one (72 samples, 0.42%)</title><rect x="93.5087%" y="197" width="0.4237%" height="15" fill="rgb(222,19,48)" fg:x="15889" fg:w="72"/><text x="93.7587%" y="207.50"></text></g><g><title>bench-913d788d6c26c7be`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (25 samples, 0.15%)</title><rect x="93.7853%" y="181" width="0.1471%" height="15" fill="rgb(232,45,27)" fg:x="15936" fg:w="25"/><text x="94.0353%" y="191.50"></text></g><g><title>bench-913d788d6c26c7be`std::collections::hash::map::RandomState::new::KEYS::__getit (4 samples, 0.02%)</title><rect x="93.9324%" y="213" width="0.0235%" height="15" fill="rgb(249,103,42)" fg:x="15961" fg:w="4"/><text x="94.1824%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::tripleindex::TripleIndex::query (3,269 samples, 19.24%)</title><rect x="74.7528%" y="229" width="19.2385%" height="15" fill="rgb(246,81,33)" fg:x="12702" fg:w="3269"/><text x="75.0028%" y="239.50">bench-913d788d6c26c7be`minimal..</text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.04%)</title><rect x="93.9560%" y="213" width="0.0353%" height="15" fill="rgb(252,33,42)" fg:x="15965" fg:w="6"/><text x="94.2060%" y="223.50"></text></g><g><title>bench-913d788d6c26c7be`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.02%)</title><rect x="93.9913%" y="229" width="0.0235%" height="15" fill="rgb(209,212,41)" fg:x="15971" fg:w="4"/><text x="94.2413%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`std::collections::hash::map::RandomState::new::KEYS::__getit (6 samples, 0.04%)</title><rect x="94.0148%" y="229" width="0.0353%" height="15" fill="rgb(207,154,6)" fg:x="15975" fg:w="6"/><text x="94.2648%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.02%)</title><rect x="94.0560%" y="229" width="0.0235%" height="15" fill="rgb(223,64,47)" fg:x="15982" fg:w="4"/><text x="94.3060%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (17 samples, 0.10%)</title><rect x="94.6033%" y="213" width="0.1000%" height="15" fill="rgb(211,161,38)" fg:x="16075" fg:w="17"/><text x="94.8533%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (106 samples, 0.62%)</title><rect x="94.7034%" y="213" width="0.6238%" height="15" fill="rgb(219,138,40)" fg:x="16092" fg:w="106"/><text x="94.9534%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (88 samples, 0.52%)</title><rect x="94.8093%" y="197" width="0.5179%" height="15" fill="rgb(241,228,46)" fg:x="16110" fg:w="88"/><text x="95.0593%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (218 samples, 1.28%)</title><rect x="94.0796%" y="229" width="1.2830%" height="15" fill="rgb(223,209,38)" fg:x="15986" fg:w="218"/><text x="94.3296%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.04%)</title><rect x="95.3272%" y="213" width="0.0353%" height="15" fill="rgb(236,164,45)" fg:x="16198" fg:w="6"/><text x="95.5772%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.06%)</title><rect x="95.6391%" y="213" width="0.0647%" height="15" fill="rgb(231,15,5)" fg:x="16251" fg:w="11"/><text x="95.8891%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (4 samples, 0.02%)</title><rect x="95.7039%" y="213" width="0.0235%" height="15" fill="rgb(252,35,15)" fg:x="16262" fg:w="4"/><text x="95.9539%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (67 samples, 0.39%)</title><rect x="95.3625%" y="229" width="0.3943%" height="15" fill="rgb(248,181,18)" fg:x="16204" fg:w="67"/><text x="95.6125%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.02%)</title><rect x="95.7333%" y="213" width="0.0235%" height="15" fill="rgb(233,39,42)" fg:x="16267" fg:w="4"/><text x="95.9833%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="96.9927%" y="213" width="0.0235%" height="15" fill="rgb(238,110,33)" fg:x="16481" fg:w="4"/><text x="97.2427%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (120 samples, 0.71%)</title><rect x="98.4169%" y="197" width="0.7062%" height="15" fill="rgb(233,195,10)" fg:x="16723" fg:w="120"/><text x="98.6669%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (649 samples, 3.82%)</title><rect x="95.7568%" y="229" width="3.8194%" height="15" fill="rgb(254,105,3)" fg:x="16271" fg:w="649"/><text x="96.0068%" y="239.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (435 samples, 2.56%)</title><rect x="97.0162%" y="213" width="2.5600%" height="15" fill="rgb(221,225,9)" fg:x="16485" fg:w="435"/><text x="97.2662%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (77 samples, 0.45%)</title><rect x="99.1231%" y="197" width="0.4532%" height="15" fill="rgb(224,227,45)" fg:x="16843" fg:w="77"/><text x="99.3731%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (8 samples, 0.05%)</title><rect x="99.5822%" y="229" width="0.0471%" height="15" fill="rgb(229,198,43)" fg:x="16921" fg:w="8"/><text x="99.8322%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.04%)</title><rect x="99.6292%" y="229" width="0.0353%" height="15" fill="rgb(206,209,35)" fg:x="16929" fg:w="6"/><text x="99.8792%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::reasoner::Reasoner::materialize (16,709 samples, 98.33%)</title><rect x="1.3595%" y="245" width="98.3345%" height="15" fill="rgb(245,195,53)" fg:x="231" fg:w="16709"/><text x="1.6095%" y="255.50">bench-913d788d6c26c7be`minimal::reasoner::Reasoner::materialize</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.03%)</title><rect x="99.6645%" y="229" width="0.0294%" height="15" fill="rgb(240,92,26)" fg:x="16935" fg:w="5"/><text x="99.9145%" y="239.50"></text></g><g><title>bench-913d788d6c26c7be`minimal::tripleindex::TripleIndex::query (6 samples, 0.04%)</title><rect x="99.6940%" y="245" width="0.0353%" height="15" fill="rgb(207,40,23)" fg:x="16940" fg:w="6"/><text x="99.9440%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="99.7352%" y="245" width="0.0177%" height="15" fill="rgb(223,111,35)" fg:x="16947" fg:w="3"/><text x="99.9852%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.06%)</title><rect x="99.7528%" y="245" width="0.0647%" height="15" fill="rgb(229,147,28)" fg:x="16950" fg:w="11"/><text x="100.0028%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="99.8176%" y="245" width="0.0118%" height="15" fill="rgb(211,29,28)" fg:x="16961" fg:w="2"/><text x="100.0676%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`bencher::Bencher::iter (16,989 samples, 99.98%)</title><rect x="0.0000%" y="277" width="99.9823%" height="15" fill="rgb(228,72,33)" fg:x="0" fg:w="16989"/><text x="0.2500%" y="287.50">bench-913d788d6c26c7be`bencher::Bencher::iter</text></g><g><title>bench-913d788d6c26c7be`minimal::TripleStore::materialize (16,779 samples, 98.75%)</title><rect x="1.2359%" y="261" width="98.7465%" height="15" fill="rgb(205,214,31)" fg:x="210" fg:w="16779"/><text x="1.4859%" y="271.50">bench-913d788d6c26c7be`minimal::TripleStore::materialize</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (26 samples, 0.15%)</title><rect x="99.8293%" y="245" width="0.1530%" height="15" fill="rgb(224,111,15)" fg:x="16963" fg:w="26"/><text x="100.0793%" y="255.50"></text></g><g><title>bench-913d788d6c26c7be`std::rt::lang_start::_{{closure}} (16,990 samples, 99.99%)</title><rect x="0.0000%" y="357" width="99.9882%" height="15" fill="rgb(253,21,26)" fg:x="0" fg:w="16990"/><text x="0.2500%" y="367.50">bench-913d788d6c26c7be`std::rt::lang_start::_{{closure}}</text></g><g><title>bench-913d788d6c26c7be`std::sys_common::backtrace::__rust_begin_short_backtrace (16,990 samples, 99.99%)</title><rect x="0.0000%" y="341" width="99.9882%" height="15" fill="rgb(245,139,43)" fg:x="0" fg:w="16990"/><text x="0.2500%" y="351.50">bench-913d788d6c26c7be`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench-913d788d6c26c7be`bench::main (16,990 samples, 99.99%)</title><rect x="0.0000%" y="325" width="99.9882%" height="15" fill="rgb(252,170,7)" fg:x="0" fg:w="16990"/><text x="0.2500%" y="335.50">bench-913d788d6c26c7be`bench::main</text></g><g><title>bench-913d788d6c26c7be`bencher::run_tests_console (16,990 samples, 99.99%)</title><rect x="0.0000%" y="309" width="99.9882%" height="15" fill="rgb(231,118,14)" fg:x="0" fg:w="16990"/><text x="0.2500%" y="319.50">bench-913d788d6c26c7be`bencher::run_tests_console</text></g><g><title>bench-913d788d6c26c7be`bencher::Bencher::auto_bench (16,990 samples, 99.99%)</title><rect x="0.0000%" y="293" width="99.9882%" height="15" fill="rgb(238,83,0)" fg:x="0" fg:w="16990"/><text x="0.2500%" y="303.50">bench-913d788d6c26c7be`bencher::Bencher::auto_bench</text></g><g><title>bench-913d788d6c26c7be`main (16,991 samples, 99.99%)</title><rect x="0.0000%" y="389" width="99.9941%" height="15" fill="rgb(221,39,39)" fg:x="0" fg:w="16991"/><text x="0.2500%" y="399.50">bench-913d788d6c26c7be`main</text></g><g><title>bench-913d788d6c26c7be`std::rt::lang_start_internal (16,991 samples, 99.99%)</title><rect x="0.0000%" y="373" width="99.9941%" height="15" fill="rgb(222,119,46)" fg:x="0" fg:w="16991"/><text x="0.2500%" y="383.50">bench-913d788d6c26c7be`std::rt::lang_start_internal</text></g><g><title>all (16,992 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(222,165,49)" fg:x="0" fg:w="16992"/><text x="0.2500%" y="447.50"></text></g><g><title>0x1 (16,992 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(219,113,52)" fg:x="0" fg:w="16992"/><text x="0.2500%" y="431.50">0x1</text></g><g><title>libdyld.dylib`start (16,992 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(214,7,15)" fg:x="0" fg:w="16992"/><text x="0.2500%" y="415.50">libdyld.dylib`start</text></g></svg></svg>